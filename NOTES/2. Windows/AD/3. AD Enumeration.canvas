{
	"nodes":[
		{"id":"a878b81bedb8fb66","type":"file","file":"NOTES/99. TOOLS/Bloodhound/Bloodhound.md","x":-1928,"y":-1360,"width":815,"height":1124},
		{"id":"ca8897ead8ee6de7","type":"text","text":"# AD ENUMERATION","x":-1200,"y":-20,"width":360,"height":120,"color":"1"},
		{"id":"27c9fcd13325948e","type":"text","text":"# Enumeration through Microsoft Management Console + Remote Server Administration Tools (RSAT)\n- **Installation**:\n    - If using your own Windows machine, install RSAT AD Snap-Ins through \"Apps & Features.\"\n- **Starting MMC**:\n    - Press Start, search \"run,\" type MMC, and press Enter.\n- **Authentication**:\n    - Use `Runas.exe`  to ensure MMC uses injected AD credentials.\n- **Adding AD Snap-Ins**:\n    - In MMC, go to File -> Add/Remove Snap-in.\n    - Add all three Active Directory Snap-ins.\n- **Configuration**:\n    - Click **File** -> **Add/Remove Snap-in**\n\t- Select and **Add** all three Active Directory Snap-ins\n\t- Click through any errors and warnings  \n\t- Right-click on **Active Directory Domains and Trusts** and select **Change Forest**\n\t- Enter _za.tryhackme.com_ as the **Root domain** and Click **OK**\n\t- Right-click on **Active Directory Sites and Services** and select **Change Forest**\n\t- Enter _za.tryhackme.com_ as the **Root domain** and Click OK\n\t- Right-click on **Active Directory Users and Computers** and select **Change Domain**\n\t- Enter _za.tryhackme.com_ as the **Domain** and Click **OK**\n\t- Right-click on **Active Directory Users and Computers** in the left-hand pane  \n\t- Click on **View** -> **Advanced Features**\n- **Enumerating AD Information**:\n    - Explore AD structure, users, computers, departments, and properties.\n    - View user attributes, group memberships, and machine lists.\n- **Benefits**:\n    - Provides holistic view of AD environment.\n    - Allows rapid searching of AD objects.\n    - Enables direct updates to AD objects with sufficient privileges.\n- **Drawbacks**:\n    - Requires RDP access.\n    - Limited in gathering AD-wide properties or attributes.","x":1380,"y":-60,"width":928,"height":1040},
		{"id":"d21a3a4393d2cb76","type":"text","text":"# prints all objects in the entire domain\n```powershell\n$PDC = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().PdcRoleOwner.Name\n$DN = ([adsi]'').distinguishedName \n$LDAP = \"LDAP://$PDC/$DN\"\n\n$direntry = New-Object System.DirectoryServices.DirectoryEntry($LDAP)\n\n$dirsearcher = New-Object System.DirectoryServices.DirectorySearcher($direntry)\n# $dirsearcher.filter=\"samAccountType=805306368\" # enumerate all users in the domain\n$dirsearcher.FindAll()\n```\n\n# attributes of each object\nThis complete script will search through AD and filter the results based on the _samAccountType_ of our choosing, then place the results into the new _$result_ variable. It will then further filter the results based on two _foreach_ loops. The first loop will extract the objects stored in _$result_ and place them into the _$obj_ variable. The second loop will extract all the properties for each object and store the information in the _$prop_ variable. The script will then print _$prop_ and present the output in the terminal.\n```powershell\n$domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()\n$PDC = $domainObj.PdcRoleOwner.Name\n$DN = ([adsi]'').distinguishedName \n$LDAP = \"LDAP://$PDC/$DN\"\n\n$direntry = New-Object System.DirectoryServices.DirectoryEntry($LDAP)\n\n$dirsearcher = New-Object System.DirectoryServices.DirectorySearcher($direntry)\n$dirsearcher.filter=\"samAccountType=805306368\"\n$result = $dirsearcher.FindAll()\n\nForeach($obj in $result)\n{\n    Foreach($prop in $obj.Properties)\n    {\n        $prop\n    }\n\n    Write-Host \"-------------------------------\"\n}\n```\n\n## filter based on any property of any object type\nWe can filter based on any property of any object type. In the example below, we have made two changes. First, we have changed the filter to use the _name_ property to only show information for _jeffadmin_. Additionally, we have added _.memberof_ to the _$prop_ variable to only display the groups _jeffadmin_ is a member of\n```powershell\n$domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()\n$PDC = $domainObj.PdcRoleOwner.Name\n$DN = ([adsi]'').distinguishedName \n$LDAP = \"LDAP://$PDC/$DN\"\n\n$direntry = New-Object System.DirectoryServices.DirectoryEntry($LDAP)\n\n$dirsearcher = New-Object System.DirectoryServices.DirectorySearcher($direntry)\n$dirsearcher.filter=\"name=jeffadmin\"\n$result = $dirsearcher.FindAll()\n\nForeach($obj in $result)\n{\n    Foreach($prop in $obj.Properties)\n    {\n        $prop.memberof\n    }\n\n    Write-Host \"-------------------------------\"\n}\n```","x":2736,"y":-479,"width":1344,"height":1879},
		{"id":"311b2b16d3ecc7d1","type":"text","text":"# Enumeration with legacy Windows tools\n```Powershell\n# Run on a domain-joined host\n\nPS>net user /domain # Lists all users in the AD domain\nPS>net user <user> /domain # Provides detailed information about a specific user.\nPS>net group /domain # Lists all groups in the AD domain\nPS>net group \"<groupname>\" /domain # Shows members of a specific group\nPS>net accounts  # Displays password policy details like history, lockout thresholds\nPS>net accounts /domain # Displays password policy details like history, lockout thresholds\n```\n**Benefits**:\n- No need for additional tools; simple commands are often not monitored.\n- Works without a GUI, suitable for remote access scenarios.\n- Supported in scripting languages for phishing payloads.\n\n**Drawbacks**:\n- Must be executed from a domain-joined machine.\n- Limited output for users with more than ten group memberships.\n- `net` does not show nested groups\n- `net` only shows up to 10 groups even if a user is in more","x":-981,"y":-1360,"width":928,"height":640},
		{"id":"4323804b8ff24236","type":"text","text":"# Enumeration through PowerShell\nonly installed by default on domain controllers as part of the [_Remote Server Administration Tools_](https://learn.microsoft.com/en-us/troubleshoot/windows-server/system-management-components/remote-server-administration-tools) (RSAT)\n## Users\n- `Get-ADUser -Filter *` – return all domain users\n- `Get-ADUser -Filter 'Name -like \"*stevens\"'` – find any user where name ends in `...stevens`\n- `Get-ADUser -Identity john.doe -Properties *` – find the user `john.doe` and return all properties\n## Groups\n- `Get-ADGroup -Filter *` – return all domain groups\n- `Get-ADGroup -Identity Administrators | Get-ADGroupMember` – pipe the `Administrators` group object to `Get-ADGroupMember` to retrieve members of the group\n## AD Objects\nGet any domain objects that we modified on or after a specific date and time\n```powershell\n# February 28, 2022 00:00:00 (system time zone)\n$modifiedDate = Get-Date '2022/02/28'\nGet-ADObject -Filter \"whenChanged -ge $modifiedDate\" -IncludeDeletedObjects\n```\n## Domains\n`Get-ADDomain` – get information about the domain from the domain controller\n## Change a User Password\n```powershell\n$oldPass = Read-Host -AsSecureString -Prompt 'Enter the old password'\n$newPass = Read-Host -AsSecureString -Prompt 'Enter the new password'\nSet-ADAccountPassword -Identity user.name -OldPassword $oldpPass -NewPassword $newPass\n```\n\n## \n`Find-DomainShare`\n`Find-DomainShare  -CheckShareAccess`\n```\nkali> gpp-decrypt \"+bsY0V3d4/KgX3VJdO/vyepPfAN1zMFTiQDApgR92JE\"\n```\n","x":0,"y":-1840,"width":928,"height":1440},
		{"id":"a37c057b58359e4b","type":"text","text":"# Enumeration with .NET Classes\n[_Active Directory Services Interface_](https://learn.microsoft.com/en-us/windows/win32/adsi/active-directory-service-interfaces-adsi) (ADSI) (a set of interfaces built on [_COM_](https://learn.microsoft.com/en-us/windows/win32/com/com-objects-and-interfaces)) as an LDAP provider.\n[_Primary Domain Controller_](https://learn.microsoft.com/en-GB/troubleshoot/windows-server/identity/fsmo-roles) (PDC) - DC that holds the most updated information. . There can be only one PDC in a domain. To find the PDC -  find the DC holding the _PdcRoleOwner_ property.\n\n```Powershell\n# Domain Class\nPS> [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()\n```\n\n## enum_script.ps1\nuse .NET classes and ADSI to dynamically obtain the full LDAP path.\n\n```\n# Store the domain object in the $domainObj variable\n$domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()\n\n# Store the PdcRoleOwner name to the $PDC variable\n$PDC = $domainObj.PdcRoleOwner.Name\n\n# Store the Distinguished Name variable into the $DN variable\n$DN = ([adsi]'').distinguishedName\n\n# Print the $DN variable\n$LDAP = \"LDAP://$PDC/$DN\"\n$LDAP\n```\n\n\n\n```powershell\ncmd> powershell -ep bypass\n./enum_script.ps1\n```","x":960,"y":-1200,"width":1041,"height":880},
		{"id":"225ebd54b12e6eb7","type":"text","text":"# Runas\nleverage AD credentials on a Windows machine we control, especially when we don't have the means to create a new domain-joined machine.\nnative Windows binary allows us to inject credentials legitimately into memory\n\n```powershell\nPS> runas.exe /netonly /user:<domain>\\<username> cmd.exe\n```    \n- `/netonly`: Loads credentials for network authentication but doesn't authenticate against a domain controller. Local commands run in the context of the user's standard Windows account.\n- `/user`: Specifies the domain and username. It's recommended to use the Fully Qualified Domain Name (FQDN).\n- `cmd.exe`: The program to execute once the credentials are injected. It's commonly used because it allows launching other programs.\n\n**Usage on Own Windows Machine**:\n    \n- Run the first Command Prompt as Administrator to inject an Administrator token into CMD.\n- This doesn't grant network administrative privileges but ensures local commands run with administrative privileges.","x":120,"y":591,"width":979,"height":539},
		{"id":"c9004434f49e8e36","type":"text","text":"# Credential Injection","x":-255,"y":233,"width":405,"height":107},
		{"id":"ac232d200756a81b","type":"text","text":"# AD Enumeration with PowerView.ps1\n```powershell\nPS> Import-Module .\\PowerView.ps1\n\nGet-NetDomain # GetCurrentDomain basic information about the domain\n\nGet-NetUser # list of all users in the domain\nGet-NetUser | select cn\nGet-NetUser | select cn,pwdlastset,lastlogon\n\nGet-NetGroup | select cn # enumerate groups\nGet-NetGroup \"Sales Department\" | select member\n\nGet-NetComputer # enumerate the computer objects in the domain.\nGet-NetComputer | select operatingsystem,dnshostname\nGet-NetComputer | select dnshostname,operatingsystem,operatingsystemversion\n\n# scans the network in an attempt to determine if our current user has administrative permissions on any computers in the domain.\nFind-LocalAdminAccess \n\nGet-NetSession -ComputerName files04 # which user is logged in to which computer\nGet-NetSession -ComputerName files04 -Verbose\n\n# retrieve the permissions for the object we define with the **-Path** flag\nGet-Acl -Path HKLM:SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\DefaultSecurity\\ | fl \n\nPath   : Microsoft.PowerShell.Core\\Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\DefaultSecurity\\\nOwner  : NT AUTHORITY\\SYSTEM\nGroup  : NT AUTHORITY\\SYSTEM\nAccess : BUILTIN\\Users Allow  ReadKey\n         BUILTIN\\Administrators Allow  FullControl\n         NT AUTHORITY\\SYSTEM Allow  FullControl\n         CREATOR OWNER Allow  FullControl\n         APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES Allow  ReadKey\n         S-1-15-3-1024-1065365936-1281604716-3511738428-1654721687-432734479-3232135806-4053264122-3456934681 Allow  ReadKey\n\n\n```","x":1085,"y":-2200,"width":1235,"height":800},
		{"id":"200308f43d87b743","type":"text","text":"# IP vs Hostnames","x":-655,"y":828,"width":365,"height":65},
		{"id":"27d2b62c3397395b","type":"text","text":"# DNS Configuration","x":-630,"y":656,"width":314,"height":64},
		{"id":"a7f4e985f079c53c","type":"text","text":"- If DNS isn't configured automatically, it needs manual setup, usually pointing to a domain controller.\n- PowerShell commands set DNS server address and verify its functionality.\n\t```Powershell\n\t$dnsip = \"<DC IP>\"\n\t$index = Get-NetAdapter -Name 'Ethernet' | Select-Object -ExpandProperty 'ifIndex'\n\tSet-DnsClientServerAddress -InterfaceIndex $index -ServerAddresses $dnsip\n\t```\n\t```Powershell\n\tPS> C:\\> nslookup za.tryhackme.com\n\t```","x":-1689,"y":548,"width":979,"height":345},
		{"id":"b3ed14c545caa86e","type":"text","text":"# Difference\n\n|`dir \\\\za.tryhackme.com\\SYSVOL`|`dir \\\\<DC IP>\\SYSVOL`|\n|:-:|:-:|\n|Uses hostname for network authentication<br>attempting Kerberos authentication first.|Uses IP address, forcing NTLM| authentication.","x":-797,"y":943,"width":641,"height":205},
		{"id":"fd92661663b68732","type":"file","file":"NOTES/99. TOOLS/Bloodhound/Bloodhound.md","x":-2960,"y":129,"width":1200,"height":1351},
		{"id":"4e27df7faf108fa0","type":"text","text":"# AUTOMATIC TOOLS","x":-2640,"y":-320,"width":338,"height":158}
	],
	"edges":[
		{"id":"386e7c2014503e1e","fromNode":"ca8897ead8ee6de7","fromSide":"right","toNode":"c9004434f49e8e36","toSide":"left"},
		{"id":"5c4590ec7d6bd99e","fromNode":"c9004434f49e8e36","fromSide":"bottom","toNode":"225ebd54b12e6eb7","toSide":"left"},
		{"id":"ec69e02f1bde32c0","fromNode":"ca8897ead8ee6de7","fromSide":"right","toNode":"27d2b62c3397395b","toSide":"top"},
		{"id":"10537ba6b08840ce","fromNode":"27d2b62c3397395b","fromSide":"left","toNode":"a7f4e985f079c53c","toSide":"right"},
		{"id":"5d4d8ba5553cbced","fromNode":"200308f43d87b743","fromSide":"bottom","toNode":"b3ed14c545caa86e","toSide":"top"},
		{"id":"023c3c5e6a3905c5","fromNode":"ca8897ead8ee6de7","fromSide":"top","toNode":"27c9fcd13325948e","toSide":"left"},
		{"id":"3da863295ed6d07e","fromNode":"225ebd54b12e6eb7","fromSide":"right","toNode":"27c9fcd13325948e","toSide":"bottom"},
		{"id":"7b206c9881580fb4","fromNode":"ca8897ead8ee6de7","fromSide":"top","toNode":"311b2b16d3ecc7d1","toSide":"bottom"},
		{"id":"cc0590ed1f68ff4b","fromNode":"ca8897ead8ee6de7","fromSide":"top","toNode":"4323804b8ff24236","toSide":"bottom"},
		{"id":"c91443ff47c820e8","fromNode":"27d2b62c3397395b","fromSide":"bottom","toNode":"200308f43d87b743","toSide":"top"},
		{"id":"eea12c02b838003f","fromNode":"ca8897ead8ee6de7","fromSide":"top","toNode":"a878b81bedb8fb66","toSide":"right"},
		{"id":"87a1e18471b69373","fromNode":"a37c057b58359e4b","fromSide":"right","toNode":"d21a3a4393d2cb76","toSide":"top"},
		{"id":"c0faa82f63b31644","fromNode":"ca8897ead8ee6de7","fromSide":"top","toNode":"a37c057b58359e4b","toSide":"bottom"},
		{"id":"6f78bf891bebe5d5","fromNode":"4323804b8ff24236","fromSide":"top","toNode":"ac232d200756a81b","toSide":"left"},
		{"id":"47eedc815229a76a","fromNode":"ca8897ead8ee6de7","fromSide":"left","toNode":"4e27df7faf108fa0","toSide":"right"},
		{"id":"a8919efd33317ac2","fromNode":"4e27df7faf108fa0","fromSide":"bottom","toNode":"fd92661663b68732","toSide":"top"}
	]
}