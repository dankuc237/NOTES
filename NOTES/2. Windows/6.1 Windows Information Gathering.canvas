{
	"nodes":[
		{"id":"4ee7d97506914a22","type":"text","text":"# Manual Local Enumeration\n\n## Enumerationg System Information\n```powershell\ncmd> systeminfo\n# Display installed hotfixes and updates\ncmd> wmic qfe get Caption,Description,HotFixID,InstalledOn\n```\n## Enumerationg Users\n```bash\npost/windows/gather/enum_logged_on_users\nmeterpreter> getuid, getprivs\n```\n```powershell\ncmd> whoami /all [/priv] [/groups] # Display current username, privileges, and groups \ncmd> query user # List users currently logged into the system \ncmd> net user <nazwa usera> # Administrator, Guest\n\n```\n\n## Enumerationg Network Information\n\n```powershell\ncmd> ipconfig [/all]\ncmd> route print\ncmd> arp -a\ncmd> netstat -ano\ncmd> netsh firewall show state # Display the state of the firewall\ncmd> netsh advfirewall show all profiles # Show all firewall profiles\n```\n\n## Enumerationg processes Services\n\n```powershell\ncmd> net start # check running services\ncmd> wmic service list brief\ncmd> wmic service where 'Caption like \"Remote%\" and started=true' get Caption # get info about RDP\ncmd> tasklist /SVC # List processes and associated services\ncmd> schtasks /query /fo LIST # List all scheduled tasks\n```\n\n```bash\nmeterpreter> run post/windows/gather/enum_services\nmeterpreter> run service_manager -l\n```\n```bash\nmeterpreter>ps, pgrep explorer.exe, migrate 2137\n```\n\n## Enumerating installed applications\n```powershell\n# Show all data of all installed apps\nreg query \"HKLM\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\" /s\n\n# Show only names\nreg query \"HKLM\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\" /s | findstr \"DisplayName\"\n```\n```powershell\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\" /s | findstr \"DisplayName\"\n```","x":354,"y":-815,"width":985,"height":1335},
		{"id":"0e6ef912fc1f75dd","type":"text","text":"# Certain Files\n```powershell\n# search for password manager databases \nGet-ChildItem -Path C:\\ -Include *.kdbx -File -Recurse -ErrorAction SilentlyContinue\n\n# search for configuration files \nGet-ChildItem -Path C:\\Users -Include *.txt,*.ini -File -Recurse -ErrorAction SilentlyContinue\n\n# search for documents and text files in the home directory of the user _dave_\nGet-ChildItem -Path C:\\Users\\dave\\ -Include *.txt,*.pdf,*.xls,*.xlsx,*.doc,*.docx -File -Recurse -ErrorAction SilentlyContinue\n\n# search through files for specific terms related to credentials for the user `steve`\nGet-ChildItem -Path C:\\ -Recurse -ErrorAction SilentlyContinue -Include *.txt, *.ini, *.xml, *.json | \n    Select-String -Pattern \"password\", \"login\", \"username\" | \n    Select-Object FileName, LineNumber, Line\n```","x":1480,"y":-622,"width":1080,"height":455},
		{"id":"0e153560005f9ac6","type":"text","text":"## Unattended Windows Setup utility\nWindows can automate a variety of repetitive tasks, such as the mass rollout or installation of Windows on many systems.\n\nThis tool utilizes configuration files that contain specific configurations and user account credentials, specifically the Administrator account’s password.  \nIf the Unattended Windows Setup configuration files are left on the target system after installation, they can reveal user account credentials that can be used by attackers to authenticate with Windows target legitimately.\n\nThe Unattended Windows Setup utility will typically utilize one of the following configuration files that contain user account and system configuration information:\n\n- `C:\\Windows\\Panther\\Unattend.xml`\n- `C:\\Windows\\Panther\\Autounattend.xml`\n\nHasła ukryte w plikach czasem moga być zakodowane Base64\n\n```xml\nSzukać sekcji:\n<Autologon>\n```\n```powershell\n# Decoding administrator password using Powershell.\nPS> $password='QWRtaW5AMTIz'\nPS> $password=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($password))\nPS> echo $password\n```\n\n\n\n","x":1480,"y":-87,"width":1080,"height":647},
		{"id":"72463e58a4cb3ea6","type":"text","text":"# PowerShell History\n\nDue to increased cybersecurity awareness, fewer users store sensitive information in plain-text files. However, attackers can still leverage PowerShell, which is often used in enterprise environments and records important data through logging mechanisms.\n\n## Key PowerShell Logging Mechanisms:\n1. **PowerShell Transcription**: Logs all commands entered, akin to \"over-the-shoulder\" monitoring. The logs are stored in transcript files, often in user directories or network shares.\n2. **Script Block Logging**: Records blocks of code or commands as events, even if they are encoded.\n\nBoth mechanisms are valuable for defense but can also reveal sensitive information to attackers.\n\n## Retrieving PowerShell History:\n```powershell\n# Retrieves a list of previously executed commands. However, many administrators use the **Clear-History** command to clear this history.\nPS> Get-History\n\n# Starting from PowerShell v5, the PSReadline module retains command history separately. Clear-History* does not affect this, so attackers can retrieve command history from the file path revealed by Get-PSReadlineOption.\nPS> (Get-PSReadlineOption).HistorySavePath\n\nPS> Start-Transcript -Path \"C:\\Users\\Public\\Transcripts\\transcript01.txt\"\nPS> Set-PSReadlineOption, -HistorySaveStyle, Savenothing\nPS> Stop-Transcript\n```\n\n### Conclusion:\nPowerShell history and transcript logs are often overlooked by administrators. Attackers can exploit this to retrieve sensitive information, such as credentials, even after **Clear-History** has been run. Defensive measures like **Set-PSReadlineOption** can prevent history recording.\n","x":1480,"y":600,"width":1080,"height":820},
		{"id":"4786f4f26578650b","type":"text","text":"# Automatic Local Enumeration\n\n## JAWS (skrypt .ps1)\n\nhttps://github.com/411Hall/JAWS\n\n```powershell\n# skopiować raw skrypt do schowka\n# zapisać skrypt na kali w pliku jaws-enum.ps1\n# przesłać plik na windows\n# w shell windows:\npowershell.exe -ExecutionPolicy Bypass -F .\\jaws-enum.ps1 -OutputFilename JAWS-Enum.txt\n```\n\n## winPEAS\n```bash\n$ ls -laR /usr/share/peass\n```\n\n[PEASS Project](https://github.com/peass-ng/PEASS-ng/tree/master)\n- [WinPEAS](https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS):\n\t- PS1: https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS/winPEASps1\n\t```powershell\n\t-OutputDir \"C:\\winpeas_out\"\n\t```\n\t- bat: https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS/winPEASbat\n\t```cmd\n\t\tcmd /c \"winPEAS.bat > winpeas_out\"\n\t```\n\t- exe: https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS/winPEASexe\n\t```powershell\n\t.\\winPEASany.exe /h # help\n\t.\\winPEASany.exe [log[=logfile]] # output to <logfile>, \"out.txt\" if not specified\n\t.\\winPEASany.exe [-network=\"auto\"|-ports[=\"80,...\"]] # find network interfaces, portscan nmap top 1000 or specified ports \n\t```\n\n\n\n## seatbelt.exe\nSeatbelt is a C# project that performs a number of security oriented host-survey \"safety checks\" relevant from both offensive and defensive security perspectives.\n[project](https://github.com/GhostPack/Seatbelt)\n[precompiled binaries](https://github.com/jakobfriedl/precompiled-binaries)\n```powershell\nPS> .\\Seatbelt.exe -group=all -q -outputfile=\"C:\\Users\\dave\\out.txt\"\nPS> .\\Seatbelt.exe -group=all -outputfile=\"C:\\Users\\dave\\out.json\"\n```","x":-960,"y":-815,"width":1160,"height":1175},
		{"id":"1eac3900bd4c0363","type":"text","text":"# Things to look for","x":1634,"y":-815,"width":772,"height":89},
		{"id":"f68d974587f5390b","type":"text","text":"# Local Enumeration\n\n## Enumerating System Information\n```powershell\n# Display detailed system information\ncmd> systeminfo\nPS> Get-ComputerInfo\n\n# Display installed hotfixes and updates\ncmd> wmic qfe get Caption,Description,HotFixID,InstalledOn\nPS> Get-HotFix\n```\n## Enumerating/Adding Users and Groups\n```bash\n# Metasploit\npost/windows/gather/enum_logged_on_users\nmeterpreter> getuid, getprivs\n```\n```powershell\ncmd> whoami [/priv] [/groups]\ncmd> query user\n```\n\n```powershell\n# List users currently logged into the system \ncmd> query user \nPS> Get-WmiObject -Class Win32_ComputerSystem \n\n# Display current username, privileges, and groups \ncmd> whoami [/priv] [/groups] \nPS> whoami; Get-Process -IncludeUserName (or Get-WmiObject Win32_Group) \n\n# Obtain a list of all local users \ncmd> net user \nPS> Get-LocalUser \n\n# Display a list of all local groups \ncmd> net localgroup \nPS> Get-LocalGroup \n\n# List users in a group \ncmd> net localgroup \"<group_name>\" \nPS> Get-LocalGroupMember -Group \"<group_name>\"\n\n# Add user to a group \ncmd> net localgroup \"<group_name>\" <user> /add \nPS> Add-LocalGroupMember -Group \"<group_name>\" -Member \"<user>\" \n\n# Create new user with password \ncmd> net user <username> <passwd> /add \nPS> New-LocalUser<br>-Name \"<username>\"<br>-Password (ConvertTo-SecureString \"<passwd>\" -AsPlainText -Force)<br>-FullName \"<username>\" \n\n```\n\n## Enumerating Network Information\n```powershell\n# Display IP configuration details\ncmd> ipconfig [/all]\nPS> Get-NetIPConfiguration\n\n# Display the IP routing table\ncmd> route print\nPS> Get-NetRoute\n\n# Display the ARP cache\ncmd> arp -a\nPS> Get-NetNeighbor\n\n# Display active connections and listening ports\ncmd> netstat -ano\nPS> Get-NetTCPConnection\n\n# Display the state of the firewall\ncmd> netsh firewall show state\nPS> Get-NetFirewallProfile\n\n# Show all firewall profiles\ncmd> netsh advfirewall show all profiles\nPS> Get-NetFirewallProfile\n\n```\n\n## Enumerating Processes and Services\n```bash\nmeterpreter> run post/windows/gather/enum_services\nmeterpreter> run service_manager -l\n```\n```bash\nmeterpreter>ps, pgrep explorer.exe, migrate 2137\n```\n```powershell\n# List all services with brief details\ncmd> wmic service list brief\nPS> Get-Service\n\n# Check running services\ncmd> net start\nPS> Get-Service | Where-Object {$_.Status -eq 'Running'}\n\n# Get info about Remote Desktop services\ncmd> wmic service where 'Caption like \"Remote%\" and started=true' get Caption\nPS> Get-Service | Where-Object {$_.DisplayName -like 'Remote*' -and $_.Status -eq 'Running'}\n\n# List processes and associated services\ncmd> tasklist /SVC\nPS> Get-Process | Select ProcessName, Path\nPS> Get-Process | Get-Service\n\n# List all scheduled tasks\ncmd> schtasks /query /fo LIST\nPS> Get-ScheduledTask\n\n```\n","x":354,"y":680,"width":985,"height":220},
		{"id":"994e02ac0add2567","type":"text","text":"# Local Enumeration\n## Enumerating System Information\n```powershell\n# Display detailed system information\nPS> Get-ComputerInfo\n# Display installed hotfixes and updates\nPS> Get-HotFix\n```\n## Enumerating/Adding Users and Groups\n```powershell\n# List users currently logged into the system \nPS> Get-WmiObject -Class Win32_ComputerSystem \n# Display current username, privileges, and groups \nPS> whoami; Get-Process -IncludeUserName (or Get-WmiObject Win32_Group) \n# Obtain a list of all local users \nPS> Get-LocalUser \n# Display a list of all local groups \nPS> Get-LocalGroup \n# List users in a group \nPS> Get-LocalGroupMember -Group \"<group_name>\"\n# Add user to a group \nPS> Add-LocalGroupMember -Group \"<group_name>\" -Member \"<user>\" \n# Create new user with password \nPS> New-LocalUser -Name \"<username>\" -Password (ConvertTo-SecureString \"<passwd>\" -AsPlainText -Force) -FullName \"<username>\" \n```\n## Enumerating Network Information\n```powershell\n# Display IP configuration details\nPS> Get-NetIPConfiguration\n# Display the IP routing table\nPS> Get-NetRoute\n# Display the ARP cache\nPS> Get-NetNeighbor\n# Display active connections and listening ports\nPS> Get-NetTCPConnection\n# Display the state of the firewall\nPS> Get-NetFirewallProfile\n# Show all firewall profiles\nPS> Get-NetFirewallProfile\n```\n## Enumerating Processes and Services\n\n```powershell\n# List all services with brief details\nPS> Get-Service\n# Check running services\nPS> Get-Service | Where-Object {$_.Status -eq 'Running'}\n# Get info about Remote Desktop services\nPS> Get-Service | Where-Object {$_.DisplayName -like 'Remote*' -and $_.Status -eq 'Running'}\n# List processes and associated services\nPS> Get-Process | Select ProcessName, Path\nPS> Get-Process | Get-Service\n# List all scheduled tasks\nPS> Get-ScheduledTask\n```\n## Enumerating installed applications\n```Powershell\n# show all data of all installed apps\nPS> Get-ItemProperty \"HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\" \n# show only names\nPS> Get-ItemProperty \"HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\" | select displayname \n```\n```powershell\nPS> Get-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\" | select displayname\n```\n","x":354,"y":1100,"width":985,"height":1540}
	],
	"edges":[
		{"id":"960babea7fe83f61","fromNode":"f68d974587f5390b","fromSide":"top","toNode":"4ee7d97506914a22","toSide":"bottom","label":"CMD.exe"},
		{"id":"1abdf82e7fa0e30d","fromNode":"f68d974587f5390b","fromSide":"bottom","toNode":"994e02ac0add2567","toSide":"top","label":"Powershell"}
	]
}