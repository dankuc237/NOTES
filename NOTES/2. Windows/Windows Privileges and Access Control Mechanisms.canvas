{
	"nodes":[
		{"id":"6020223abb0a58c4","type":"text","text":"_ecurity Identifier_ (SID),[1](https://portal.offsec.com/courses/pen-200-44065/learning/windows-privilege-escalation-45276/enumerating-windows-47207/understanding-windows-privileges-and-access-control-mechanisms-45278#fn-local_id_9-1) \n_access token_,[2](https://portal.offsec.com/courses/pen-200-44065/learning/windows-privilege-escalation-45276/enumerating-windows-47207/understanding-windows-privileges-and-access-control-mechanisms-45278#fn-local_id_9-2)\n_Mandatory Integrity Control_,[3](https://portal.offsec.com/courses/pen-200-44065/learning/windows-privilege-escalation-45276/enumerating-windows-47207/understanding-windows-privileges-and-access-control-mechanisms-45278#fn-local_id_9-3)\n_User Account Control_","x":-663,"y":-468,"width":823,"height":128},
		{"id":"7907e3876938e244","type":"text","text":"Windows uses only the SID, not usernames, to identify principals for access control management.","x":-663,"y":-300,"width":823,"height":70},
		{"id":"d9535b658cf20021","type":"text","text":"# User Authentication (verifying identity)\n   - The user provides credentials (username, password, etc.).\n   - Windows verifies the credentials and authenticates the user.\n","x":4480,"y":140,"width":686,"height":162},
		{"id":"56029927e6c37e71","type":"text","text":"# Access Token Generation\n**Access Token**\n\n- Generated after authentication, containing SIDs and permissions.\n- Describe the _security context_ of a given user.\n\t- The security context is a set of rules or attributes that are currently in effect.\n","x":4480,"y":520,"width":686,"height":260},
		{"id":"ca77b3d424df8187","type":"text","text":"## Security context of a token\nToken includes:\n- User's **Security Identifier (SID)**\n\t-  SIDs uniquely identify entities (users, groups) for access control.\n\t- **The SID cannot be changed and is generated when the user or group is created.**\n\t- The SID for local accounts and groups is generated by the _Local Security Authority_ (LSA),\n\t- for domain users and domain groups, it's generated on a _Domain Controller_ (DC).\n- SIDs of the groups the user is a member of\n- The user and group privileges.\n\t- **Privileges on the Windows** operating system refer to the permissions of a specific account to perform system-related local operations (e.g. modifying the filesystem or adding users).\n- Further information describing the scope of the token","x":5341,"y":520,"width":979,"height":412},
		{"id":"1c32c4a66963d7d5","type":"text","text":"# An administrative user obtains two access tokens after a successful logon:\n- **standard user access token** (or filtered admin token) - used to perform all non-privileged operations\n\t- Contains the same user-specific information as the administrator access token, but the administrative Windows privileges and SIDs are removed\n\t- It's used to display the desktop by executing the process _explorer.exe_. Explorer.exe is the parent process from which all other user-initiated processes inherit their access token. As a result, all apps run as a standard user unless a user provides consent or credentials to approve an app to use a full administrative access token\n- **administrator access token** - used when the user wants to perform a privileged operation\n\nTo leverage the administrator token, a UAC consent prompt needs to be confirmed","x":3600,"y":1032,"width":800,"height":508},
		{"id":"0bf4a7a7a5721e56","type":"text","text":"# Ownership and Inheritance\n   - Each object has an **Owner** (creator by default).\n     - The owner can modify permissions.\n   - **Inheritance** of permissions applies to container objects (folders with subfolders and files).\n     - Child objects inherit the parent object's permissions.\n","x":1960,"y":2439,"width":686,"height":240},
		{"id":"88a7dbe40cb4ea04","type":"text","text":"# User Rights\n   - Users or groups are assigned specific **User Rights** (privileges to perform system-level tasks).\n   - Rights apply to actions like signing in, backing up files, or managing system operations.\n   - Managed separately from permissions.","x":1960,"y":2712,"width":686,"height":247},
		{"id":"befa6a7d8e8c67b9","type":"text","text":"# Mandatory Integrity Control (MIC)\n   - Objects are assigned **Integrity Levels**:\n     - **System** (highest trust, kernel operations)\n     - **High** (administrative users)\n     - **Medium** (standard users)\n     - **Low** (restricted processes)\n     - **Untrusted** (minimal access)\n   - Operations between objects and processes respect these integrity levels.\n","x":1960,"y":3045,"width":686,"height":294},
		{"id":"30ae6fc7a479893c","type":"text","text":"# User Account Control (UAC)\n   - For administrative users:\n     - Windows assigns two tokens: \n       - **Standard token** for non-privileged operations.\n       - **Administrator token** for privileged tasks.\n     - The user must confirm actions via **UAC Prompt** to use the Administrator token.\n","x":1960,"y":3379,"width":686,"height":260},
		{"id":"001f2d5a9fdfa1bf","type":"text","text":"# Object Auditing\n   - Administrators can enable **auditing** to track object access (successful or failed attempts).\n   - Auditing is configured through **Local Security Settings**.\n   - Logs are viewable in the **Event Viewer** under the Security log.","x":1960,"y":3659,"width":686,"height":200},
		{"id":"e19daa6e922d4eee","type":"text","text":"# Access Granted or Denied\n- Based on the **access token** and **ACL** permissions, the user's request to access or perform actions on an object is either **granted** or **denied**.","x":1960,"y":3899,"width":686,"height":160},
		{"id":"ca2dc105a7da658a","type":"text","text":"# Permissions Check\n   - **Permissions** (Read, Write, Modify, Full control) are assigned to resources like files, folders, printers.\n   - These permissions are stored in **ACLs** for each object.\n   - Windows checks permissions for each object the user tries to access.","x":1960,"y":2199,"width":686,"height":200},
		{"id":"923afc816556a724","type":"text","text":"# Buil in groups\nMembers of _Backup Operators_ can backup and restore all files on a computer, even those files they don't have permissions for. We must not confuse this group with non-standard groups such as _BackupUsers_ in our example.\n\nMembers of _Remote Desktop Users_ can access the system with RDP, while members of _Remote Management Users_ can access it with _WinRM_.[5](https://portal.offsec.com/courses/pen-200-44065/learning/windows-privilege-escalation-45276/enumerating-windows-47207/situational-awareness-45279#fn-local_id_165-5)","x":2682,"y":2729,"width":678,"height":291},
		{"id":"025df3d325a57c00","type":"text","text":"# Windows Privileges and Access Control Flow","x":4349,"y":-160,"width":949,"height":90},
		{"id":"e2caa0f78ceb6454","type":"text","text":"\n\n### Access Control Process\nWindows manages access to system and network resources through **authentication** (verifying identity) and **authorization** (granting permissions). After authentication, permissions assigned to users and groups (represented by **Security Identifiers - SIDs**) are checked against access control lists (ACLs).\n\n### Permissions and SIDs\nPermissions define the level of access (e.g., Read, Write, Modify) granted to users or groups for objects such as files or directories. SIDs uniquely identify entities (users, groups) for access control.\n\n- **Security Principals**: Represent users, groups, or computers using unique SIDs.\n- **Access Tokens**: Generated after authentication, containing SIDs and permissions.\n- **Mandatory Integrity Control**: Enforces hierarchy of access based on integrity levels (System, High, Medium, Low, Untrusted).\n- **User Account Control (UAC)**: Requires user consent to elevate privileges for certain actions, even for administrators.\n\n### Object Ownership and Inheritance\nObjects (files, folders, etc.) are owned by their creators. Owners can change permissions and use **inheritance** to manage access control across a hierarchy of objects (parent-child relationships).\n\n### User Rights\nUser rights are privileges assigned to users or groups, allowing them to perform specific system operations (e.g., signing in, backing up data). These rights are managed separately from permissions.\n\n### Auditing and Object Access\nAdministrators can audit successful or failed access attempts to objects, helping ensure proper security and monitor for unauthorized access.\n\n## Practical Applications\nAdministrators can use these mechanisms to:\n\n- Protect network resources from unauthorized access.\n- Grant resource access aligned with organizational policies.\n- Regularly update access permissions as users' roles change.\n- Address remote access scenarios and mobile device usage.\n- Troubleshoot access issues efficiently.\n\n---\nFor more information, refer to the Windows **Access Control and Authorization Overview**.\n","x":360,"y":2439,"width":1290,"height":1214},
		{"id":"8ae4e5741c96f762","type":"text","text":"# SID\n\n```bash\nS-R-X-Y # SID representation\n\nS-1-5-21-1336799502-1441772794-948155058-1001\n```\n- **S**, which indicates that the string is a SID.\n- **R** stands for _revision_ and is always set to \"1\", since the overall SID structure continues to be on its initial version.\n- **X** determines the **identifier authority**. This is the authority that issues the SID. For example, \"5\" is the most common value for the identifier authority. It specifies _NT Authority_ and is used for local or domain users and groups.\n- **Y** represents the **sub authorities of the identifier authority**. Every SID consists of one or more sub authorities. This part consists of the domain identifier and **relative identifier (RID)**. The domain identifier is the SID of the domain for domain users, the SID of the local machine for local users, and \"32\" for built-in principals. The RID determines principals such as users or groups.\n\t- RID under 1000, which are called _well-known SIDs_.[6](https://portal.offsec.com/courses/pen-200-44065/learning/windows-privilege-escalation-45276/enumerating-windows-47207/understanding-windows-privileges-and-access-control-mechanisms-45278#fn-local_id_9-6) These SIDs identify generic and built-in groups and users instead of specific groups and users.\n\t- ```bash\n\t\tS-1-0-0                       Nobody        \n\t\tS-1-1-0\t                      Everybody\n\t\tS-1-5-11                      Authenticated Users\n\t\tS-1-5-18                      Local System\n\t\tS-1-5-domainidentifier-500    Administrator\n\t\t```\n","x":6420,"y":592,"width":823,"height":680},
		{"id":"de1e920d607fc944","type":"text","text":"**Security Principals** (users, groups, computers) are identified by SIDs.\n","x":5831,"y":1365,"width":979,"height":192},
		{"id":"fb39e45acedc8746","type":"text","text":"# Authorization (Access Control Mechanism)\n   - Based on the access token, Windows performs **authorization**.\n   - Windows uses only the SID, not usernames, to identify **Security Principals** for access control management (which **Access Control Lists (ACLs)** to apply).","x":4464,"y":1260,"width":720,"height":210},
		{"id":"bbff8ce36688fb3f","type":"link","url":"https://sekurak.pl/poznaj-bezpieczenstwo-windows-lokalne-uwierzytelnianie-i-autoryzacja-notatki-ze-szkolenia/","x":3180,"y":-115,"width":1073,"height":460},
		{"id":"752937b4a53203af","type":"text","text":"## Integrity Levels\n- System: SYSTEM (kernel, ...)\n- High: Elevated users\n- Medium: Standard users\n- Low: Very restricted rights often used in sandboxed[^privesc_win_sandbox] processes or for directories storing temporary data\n- Untrusted: Lowest integrity level with extremely limited access rights for processes or objects that pose the most potential risk","x":4537,"y":1740,"width":1000,"height":232},
		{"id":"f532c74a6f6a952a","type":"text","text":"# PROCESSES ARE STARTED OR OBJECTS ARE CREATED\nthey receive the integrity level of the principal performing this operation\nOne exception is if an executable file has a low integrity level, the process's integrity level will also be low. A principal with a lower integrity level cannot write to an object with a higher level, even if the permissions would normally allow them to do so.\nTypically, processes, e.g., cmd.exe, start with Medium integrity and are unable to perform administrative tasks when UAC is enabled.","x":2537,"y":1740,"width":990,"height":250},
		{"id":"0244d1dae0bb3376","type":"text","text":"# [User Account Control](https://learn.microsoft.com/en-us/windows/security/application-security/application-control/user-account-control/how-it-works)\nUAC is a Windows security feature that protects the operating system by running most applications and tasks with standard user privileges, even if the user launching them is an Administrator.\nWith the built-in UAC elevation component, standard users can easily perform an administrative task by entering valid credentials for a local administrator account.","x":3637,"y":1740,"width":727,"height":232},
		{"id":"86a94e1b779c83ca","type":"text","text":"# Understanding Windows Privileges and Access Control Mechanisms\n\n## Key Concepts\nWindows access control authorizes users, groups, and computers to access network or local objects. Important concepts include:\n\n- **Permissions**\n- **Ownership of objects**\n- **Inheritance of permissions**\n- **User rights**\n- **Object auditing**","x":1471,"y":1557,"width":832,"height":400}
	],
	"edges":[
		{"id":"1d29920bd5803bdd","fromNode":"d9535b658cf20021","fromSide":"bottom","toNode":"56029927e6c37e71","toSide":"top"},
		{"id":"9f425c8930cbc650","fromNode":"56029927e6c37e71","fromSide":"right","toNode":"ca77b3d424df8187","toSide":"left"},
		{"id":"87fdcfbdf692e59e","fromNode":"56029927e6c37e71","fromSide":"bottom","toNode":"fb39e45acedc8746","toSide":"top"},
		{"id":"dda756e8d655535a","fromNode":"fb39e45acedc8746","fromSide":"right","toNode":"de1e920d607fc944","toSide":"left"},
		{"id":"b649840c23698ba5","fromNode":"ca77b3d424df8187","fromSide":"right","toNode":"8ae4e5741c96f762","toSide":"left"},
		{"id":"789a8851423935f3","fromNode":"0244d1dae0bb3376","fromSide":"right","toNode":"752937b4a53203af","toSide":"left"},
		{"id":"91c40c19eca56490","fromNode":"f532c74a6f6a952a","fromSide":"right","toNode":"0244d1dae0bb3376","toSide":"left"},
		{"id":"dd84084c5b3997a0","fromNode":"56029927e6c37e71","fromSide":"left","toNode":"1c32c4a66963d7d5","toSide":"right"},
		{"id":"8f876d9b723ba8da","fromNode":"1c32c4a66963d7d5","fromSide":"bottom","toNode":"0244d1dae0bb3376","toSide":"top"}
	]
}